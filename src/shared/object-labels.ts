// Object information found at:
// https://docs.google.com/spreadsheets/d/1rrh1khlqAtQrgu0Q4MKqSlfj8P5AiDjDUpHeoKRFvII/edit#gid=0
// Data generated by creating a copy of the sheet and using a formula to generate formatted code.
// Code was further formatted by using a prettifier online.

import { SA2Object } from "./objects";
import { SetLabel } from "./interfaces";

/**
 * A map to label the properties of every object in SA2.
 * Key: Object, Value: Map<stageID, labels>
 * If stageID is -1, it is the default label for all stages
 * and will be used unless overridden by another stage.
 **/
export const SA2_LABELS = new Map<SA2Object, Map<number, SetLabel>>([
  [
    SA2Object.TRIPLESPRING,
    new Map([[-1, { var1: "Multiplier of spring's power." }]]),
  ],
  [SA2Object.ADXCHG, new Map([[-1, { var1: "Radius of the trigger." }]])],
  [
    SA2Object.AIRSHIP,
    new Map([
      [14, { var1: "Value % 2 is advertisement: 0 is got ring? 1 is SOAP" }],
    ]),
  ],
  [
    SA2Object.ARROW,
    new Map([
      [-1, { var1: "If 0, uses a pair of arrows. Otherwise, only uses one." }],
      [
        14,
        {
          xRot: "Value % 2 is sign type: 0 is horizontal (pointing towards rotation), 1 is vertical (pointing up)",
        },
      ],
      [
        26,
        {
          var1: "Scales length of object.",
          var3: "Color % 3 is map frame color: 0 is red, 1 is green, 2 is blue.",
        },
      ],
    ]),
  ],
  [
    SA2Object.ASHIBA,
    new Map([
      [
        21,
        {
          xRot: "Thousands and hundreds digits are vertical speed. Tens and ones digits are horizontal speed.",
          var1: "Scales both X and Z directions. Centered at -1.",
          var2: "Vertical oscillation amount. Cosine motion.",
          zRot: "Hundreds digit: If value is odd, TATE changes to YOKO, and the block rotates 90 degrees. Tens/ones digit: Block height is multiplied by (number % 3 + 1). If number / 3 is odd, the texture will change from one with two people to one with hieroglyphics.",
          var3: "Horizontal oscillation amount. Sine motion.",
        },
      ],
      [
        31,
        {
          var1: "Type of platform, based on (value / 2) % 2: 0 moves side-to-side, 1 falls once stepped on.",
          var2: "Movement speed.",
        },
      ],
      [44, { var1: "If value is odd, platform is shaded." }],
    ]),
  ],
  [
    SA2Object.BALOON,
    new Map([
      [
        -1,
        {
          xRot: "Contents of balloon: 0 is random between 5/10/20 Rings, 1 is 5 Rings, 2 is 10 Rings, 3 is 20 Rings, 4 is invincibility!",
        },
      ],
    ]),
  ],
  [
    SA2Object.BANGIETUTA,
    new Map([
      [
        3,
        {
          var1: "Starting Y height.",
          y: "Lowest point bungie goes to.",
          var2: "",
          zRot: "",
          var3: "Y displacement from position to release Sonic from when he stops diving. Does not seem to change the end position when the whole animation is complete, which is ~1400 units above the object's.",
        },
      ],
    ]),
  ],
  [
    SA2Object.BAT,
    new Map([
      [
        25,
        {
          xRot: "Thousands/hundreds digits rotate the roosting bounds, a rectangular rod of length determined by the tens and ones digit.",
          var1: "X Position of roosting bounds.",
          yRot: "Thousands digit determines starting (bottom) angle of the flight area, an arc covering 45 degrees of a sphere all around.",
          var2: "Y Position of roosting bounds.",
          zRot: "Scales radius of flight area.",
        },
      ],
    ]),
  ],
  [
    SA2Object.BIG_THE_CAT,
    new Map([
      [
        -1,
        {
          var1: "Big's animation: 0 is normal, 1 is head nod, 2 is victory animation, 3 is sitting, 4 is looking at his rod, 5 is scratching his belly, 6 is laying on his stomach, 7 is cheering, 8 is waiting excitedly, 9 is hips swaying, 10 is waving, 11 is scratching his chest, 12 is scratching his butt, 13 is fanning himself, 14 is running with arms flailing, 15 is running while fishing, 16 is looking up, 17 is looking down, 18 is lying on his back, 19 is also sitting, 20 is sitting while looking to his left, 21 is holding an imaginary Froggy, 22 is holding his rod up, 23 is also laying on his stomach.",
        },
      ],
    ]),
  ],
  [
    SA2Object.BIGJUMP,
    new Map([
      [
        -1,
        {
          var1: "The horizontal speed to send the player at, in the direction of the launch panel.",
          var2: "Number of frames to lock the player's controls for. However, controls are locked while in the launch animation regardless.",
          var3: "Adds to the vertical speed to send the player at, which starts at 3.2. Cannot be negative.",
        },
      ],
    ]),
  ],
  [
    SA2Object.BLINE,
    new Map([
      [
        32,
        {
          var1: "How many units for the line to travel before resetting.",
          var2: "Travel speed.",
          var3: "Scales length of the line, centered at -1.",
        },
      ],
    ]),
  ],
  [
    SA2Object.BLOCK,
    new Map([
      [
        -1,
        {
          xRot: "Thousands/hundreds digits: Time to travel between the two ports, multiplied by 4. Tens/ones digits: Delay between a block finishing and the next one starting, multiplied by 4.",
          var1: "Scale of blocks and port.",
          yRot: "Tens and ones digits offset the block's cycle.",
          var2: "If odd, reverses block travel direction.",
          zRot: "If thousands digit is odd, ending port disappears. If hundreds digit is odd, starting port disappears. If tens digit is odd, CM turns on. Ones digit % 3: 0 is OF, 1 is 2D, 2 is MD",
        },
      ],
      [23, { var3: "Doesn't appear to do as Debug claims." }],
    ]),
  ],
  [
    SA2Object.BLOCK2,
    new Map([
      [
        -1,
        {
          xRot: "Thousands/hundreds digits: Time to travel between the two ports, multiplied by 4. Tens/ones digits: Delay between a block finishing and the next one starting, multiplied by 4.",
          var1: "Scale of blocks and port.",
          yRot: "Tens and ones digits offset the block's cycle.",
          var2: "If odd, reverses block travel direction.",
          zRot: "If thousands digit is odd, ending port disappears. If hundreds digit is odd, starting port disappears. If tens digit is odd, CM turns on. Ones digit % 3: 0 is OF, 1 is 2D, 2 is MD",
        },
      ],
    ]),
  ],
  [
    SA2Object.BOARD,
    new Map([
      [
        16,
        {
          var1: "Scales whole object.",
          var2: "Value % 2 is orientation of tile: 0 is vertical, 1 is horizontal",
          var3: "Value % 3 shades the tile: 1 is light, 2 is  medium, 3 is dark.",
        },
      ],
      [
        28,
        {
          var1: "Scales whole object.",
          var3: "Value % 2 is color: 0 is blue, 1 is green.",
        },
      ],
    ]),
  ],
  [
    SA2Object.BOARD2,
    new Map([
      [
        16,
        {
          var1: "Scales both dimensions.",
          var3: "If value % 2 is odd, painting is shaded.",
        },
      ],
    ]),
  ],
  [
    SA2Object.BOARDCOL,
    new Map([
      [
        -1,
        {
          xRot: "Value % 2 determines whether the trigger stops boarding (0) or starts it (1).",
          var1: "Radius of the trigger, with 10 units added on when the object is spawned.",
        },
      ],
    ]),
  ],
  [
    SA2Object.BCOL,
    new Map([
      [
        -1,
        {
          xRot: "Value % 2 determines whether the trigger stops boarding (0) or starts it (1).",
          var1: "Radius of the trigger, with 10 units added on when the object is spawned.",
        },
      ],
    ]),
  ],
  [
    SA2Object.BONE,
    new Map([
      [
        -1,
        {
          zRot: "If tens digit is set to A, spawns an animal. Ones digit is the tens digit of animal to randomly spawn from, i.e. 1 will spawn the animals of value 10 and 11. Debug mode: Y is animal type (A for 0, B for 1, C for 2).",
        },
      ],
    ]),
  ],
  [SA2Object.BRIDGE, new Map([[9, { var3: "Closing speed." }]])],
  [
    SA2Object.BRIDGE_DYNA,
    new Map([
      [
        -1,
        {
          xRot: "An ID that tells the game which dynamite packs need to be blown up to destroy the bridge.",
        },
      ],
    ]),
  ],
  [SA2Object.BUBBLE, new Map([[-1, { var2: "" }]])],
  [
    SA2Object.BUBBLES,
    new Map([
      [
        -1,
        {
          var1: "",
          var2: "",
          var3: "Decimal value makes DISP turn into a ten-digit number, which continues to increase (non-linearly) as it goes up.",
        },
      ],
    ]),
  ],
  [
    SA2Object.BUG,
    new Map([
      [
        25,
        {
          var1: "Scales whole object.",
          var2: "If value is odd, the bug loses its collision.",
          var3: "Value % 3 is color: 0 is red, 1 is green, 2 is blue. If (value / 3) % 2 = 1, the tile is shaded.",
        },
      ],
    ]),
  ],
  [
    SA2Object.BUNCHIN,
    new Map([
      [
        -1,
        {
          xRot: "Type of weight: 0 is continuous, 1 is triggered that goes back up, 2 is triggered that needs a switch, 3 is continuous that can use a switch.",
          zRot: "On switch-using types, is an ID that tells the game what switch needs to be turned on to make the weight go back up.",
          var1: "Length is equal to 40 + 40 * value.",
          var2: "Additional maximum height above the base 30 units. Uses absolute value.",
          var3: "Length is equal to 40 + 40 * value.",
        },
      ],
    ]),
  ],
  [
    SA2Object.BURST,
    new Map([
      [
        30,
        {
          var1: "Type of debris: 0 is a big square of it, 1 is a disc-shaped chunk, 2 is a small chunk, 3 is a U-bent pipe.",
          var2: "Scales trigger sphere.",
          var3: "How long after triggering before the debris falls.",
        },
      ],
    ]),
  ],
  [
    SA2Object.BUTTERFLIES,
    new Map([
      [
        18,
        {
          xRot: "Determines starting (bottom) angle of the flight area, an arc covering 45 degrees of a sphere all around.",
          var1: "Radius of flight area.",
          zRot: "Number of butterflies.",
        },
      ],
    ]),
  ],
  [
    SA2Object.CAGE,
    new Map([
      [
        9,
        {
          xRot: "An ID that tells the game what set of enemies need to be destroyed to open the gate.",
          var1: "Opening speed.",
        },
      ],
    ]),
  ],
  [
    SA2Object.CAGEB,
    new Map([
      [
        9,
        {
          xRot: "An ID that tells the game what set of enemies need to be destroyed to open the gate.",
          var1: "Opening speed.",
        },
      ],
    ]),
  ],
  [
    SA2Object.CAGEC,
    new Map([
      [
        9,
        {
          xRot: "An ID that tells the game what set of enemies need to be destroyed to open the gate.",
          var1: "Opening speed.",
        },
      ],
    ]),
  ],
  [
    SA2Object.CAGED,
    new Map([
      [
        9,
        {
          xRot: "An ID that tells the game what set of enemies need to be destroyed to open the gate.",
          zRot: "Value % 2 is door opening direction: 0 is right, 1 is left.",
          var1: "Opening speed.",
        },
      ],
    ]),
  ],
  [
    SA2Object.CAMH,
    new Map([
      [
        -1,
        {
          xRot: "If value is even, camera faces towards it rotation; if it's odd, it faces in the opposite direction. The camera is always to the base's right.",
          zRot: "Oscillation speed.",
          var1: "Oscillation amount.",
        },
      ],
    ]),
  ],
  [
    SA2Object.CAMV,
    new Map([
      [
        -1,
        {
          xRot: "If value is even, camera faces towards it rotation; if it's odd, it faces in the opposite direction. The camera is always to the base's right.",
          var1: "Oscillation speed. Has a fixed distance at ~20 units to either side.",
        },
      ],
    ]),
  ],
  [SA2Object.CANOE, new Map([[18, { var1: "Scales whole object." }]])],
  [
    SA2Object.CAPSULEBOMB,
    new Map([
      [
        -1,
        {
          xRot: "If hundreds digit is odd, there will be ports at the top and bottom. Tens and ones digit are the time in frames between a capsule disappearing and another appearing.",
          var1: "Travel speed.",
          yRot: "Distance between the bottom and top.",
        },
      ],
    ]),
  ],
  [
    SA2Object.CARKAZ,
    new Map([
      [
        13,
        {
          var1: "If value is 0, the car will be solid. Otherwise, it will be knocked aside on contact.",
          var2: "Type of car: 0 and 1 are a taxi, 2-5 are a tram, and values above that cycle in the following order: taxi, white car, black car, blue car, red car, cyan car.",
        },
      ],
      [
        17,
        {
          var2: "Type of car: 0-1 are taxi, and values above that cycle in the following order: taxi, black SUV, blue SUV, red SUV, cyan car, cop car, GUN trolley",
        },
      ],
    ]),
  ],
  [
    SA2Object.CARMAN,
    new Map([
      [
        13,
        {
          var1: "",
          var2: "Type of car: 0 and 1 are a taxi, 2-5 are a tram, and values above that cycle in the following order: taxi, white car, black car, blue car, red car, cyan car.",
          var3: "Debug: There are thirteen paths shown, with a center coordinate given. Path is still usually near object coordinates. 0: Straight line. Center (-12.5, -2013.4, 3080) 1: First half of board section, from three-way after second ramp up to the very top. Center (-1152.497, -3396.2, 4505) 2: Entirety of board section? Center (-577.5, -4034.95, 5900) 3: Last third of board section, from bottom to the three-way. Center (-1842.5, -5310.9, 7295) 4: Path not visible, presumably in second car section. Center (622.499, -6988.4, 8285) 5: Path not fully visible, involves a long straight line. Presumably in third car section. Center (3020, -8518.35, 6387.5) 6: Path not fully visible, has a long slope and a flat part with left and right turns at the top. Center (3930, -9272.45, 5710) 7: Path not fully visible, looks like a mirrored version of 6. Center (3960, -9280.9, 5982.5) 8: Path not fully visible, starts flat before going downhill and turning right. Center (595.005, -6979.977, 8415) 9: Path not fully visible, starts with a slight uphill to a flat part, then goes downhill, all in a line. Center (3060.001, -8633.748, 6375.004) 10: Slight uphill, goes straight, turns right. Short path. Center (4461.557, -10081.383, 4985.001) 11: Path not fully visible, downhill with a turn to the left that then goes straight. Center (6700.001, -17414.996, 12074.508) 12: Straight line. Short, but longer than 10. Center (6440.005, -18927.492, 14639.52).",
        },
      ],
    ]),
  ],
  [
    SA2Object.CASHBOX,
    new Map([
      [
        8,
        {
          xRot: "Tens digit is safe color: 0 is blue, 1 is yellow, 2 is red. This is also the ID that switches use to open the safe, minus one. If ones digit % 3 != 0, turns into a texture.",
        },
      ],
    ]),
  ],
  [
    SA2Object.CC_SWITCH,
    new Map([[-1, { var3: "Number of frames to stop time for." }]]),
  ],
  [
    SA2Object.CCUBE,
    new Map([
      [
        -1,
        {
          var1: "10 units are added to the number in the setfile when it is spawned in game.",
          var2: "10 units are added to the number in the setfile when it is spawned in game.",
          var3: "10 units are added to the number in the setfile when it is spawned in game.",
        },
      ],
    ]),
  ],
  [
    SA2Object.CGWOOD,
    new Map([
      [
        22,
        {
          var1: "X distance to fall with the right gravity.",
          var2: "Y distance to fall with the right gravity.",
          var3: "Z distance to fall with the right gravity.",
        },
      ],
    ]),
  ],
  [
    SA2Object.CGIRON,
    new Map([
      [
        22,
        {
          var1: "X distance to fall with the right gravity.",
          var2: "Y distance to fall with the right gravity.",
          var3: "Z distance to fall with the right gravity.",
        },
      ],
    ]),
  ],
  [
    SA2Object.SGOLID,
    new Map([
      [
        22,
        {
          var1: "X distance to fall with the right gravity.",
          var2: "Y distance to fall with the right gravity.",
          var3: "Z distance to fall with the right gravity.",
        },
      ],
    ]),
  ],
  [
    SA2Object.CHAOPIPE,
    new Map([
      [
        -1,
        {
          var1: "The tens digit of animal to randomly spawn from, i.e. 1 will spawn the animals of value 10 and 11. Values above 2 default to 0.",
        },
      ],
    ]),
  ],
  [
    SA2Object.CHIMNEY,
    new Map([
      [21, { var1: "Scales the whole object." }],
      [28, { var1: "Scales the whole object." }],
    ]),
  ],
  [SA2Object.CHIN, new Map([[18, { var1: "Scales whole object." }]])],
  [SA2Object.CHIN2, new Map([[18, { var1: "Scales whole object." }]])],
  [SA2Object.CHIN3, new Map([[18, { var1: "Scales whole object." }]])],
  [
    SA2Object.COFFIN,
    new Map([
      [
        26,
        { var3: "Color, based on value % 3: 0 is blue, 1 is green, 2 is red." },
      ],
    ]),
  ],
  [
    SA2Object.CONT,
    new Map([
      [
        -1,
        {
          var1: "Distance, in game units, the container moves from its location in either direction.",
          var2: "Speed multiplier.",
        }
      ],
      [
        8,
        {
          xRot: "If value is odd, reversesits travel path, going to its left first instead of right.",
        },
      ],
      [27, { var1: "Rotation speed." }],
    ]),
  ],
  [
    SA2Object.CONTA,
    new Map([
      [
        -1,
        {
          var1: "Distance, in game units, the container moves from its location in either direction.",
          var2: "Speed multiplier.",
        },
      ],
      [-1, { xRot: "" }],
    ]),
  ],
  [
    SA2Object.CONTB,
    new Map([
      [
        -1,
        {
          var1: "Distance, in game units, the container moves from its location in either direction.",
          var2: "Speed multiplier.",
        },
      ],
    ]),
  ],
  [
    SA2Object.CONTC,
    new Map([
      [
        -1,
        {
          var1: "Distance, in game units, the container moves from its location in either direction.",
          var2: "Speed multiplier.",
        },
      ],
      [-1, { xRot: "" }],
    ]),
  ],
  [
    SA2Object.MHCONT,
    new Map([
      [
        -1,
        {
          var1: "Distance, in game units, the container moves from its location in either direction.",
          var2: "Speed multiplier.",
        },
      ],
      [-1, { xRot: "" }],
    ]),
  ],
  [
    SA2Object.MHCONTB,
    new Map([
      [
        -1,
        {
          var1: "Distance, in game units, the container moves from its location in either direction.",
          var2: "Speed multiplier.",
        },
      ],
    ]),
  ],
  [
    SA2Object.MHCONT0,
    new Map([
      [
        -1,
        {
          var1: "Distance, in game units, the container moves from its location in either direction.",
          var2: "Speed multiplier.",
        },
      ],
    ]),
  ],
  [
    SA2Object.TRUCK,
    new Map([
      [
        -1,
        {
          var1: "Distance, in game units, the container moves from its location in either direction.",
          var2: "Speed multiplier.",
        },
      ],
    ]),
  ],
  [
    SA2Object.CONTWOOD,
    new Map([
      [
        -1,
        {
          xRot: "",
          zRot: "If tens digit is set to A, spawns an animal. Ones digit is the tens digit of animal to randomly spawn from, i.e. 1 will spawn the animals of value 10 and 11.",
        },
      ],
    ]),
  ],
  [
    SA2Object.CONTIRON,
    new Map([
      [
        -1,
        {
          xRot: "",
          zRot: "If tens digit is set to A, spawns an animal. Ones digit is the tens digit of animal to randomly spawn from, i.e. 1 will spawn the animals of value 10 and 11.",
        },
      ],
    ]),
  ],
  [
    SA2Object.DLCONT,
    new Map([
      [
        -1,
        {
          xRot: "",
          zRot: "If tens digit is set to A, spawns an animal. Ones digit is the tens digit of animal to randomly spawn from, i.e. 1 will spawn the animals of value 10 and 11.",
        },
      ],
    ]),
  ],
  [
    SA2Object.DAI,
    new Map([
      [-1, { var3: "Number of tanks to stack on top of the initial one." }],
      [21, { var1: "If odd, the tank will be shaded." }],
      [
        23,
        {
          var1: "If odd, the tank will have a shaded texture.",
        },
      ],
    ]),
  ],
  [SA2Object.DASH_PANEL, new Map([[-1, { var1: "" }]])],
  [SA2Object.DRMCN, new Map([[-1, { zRot: "" }]])],
  [
    SA2Object.DFLY,
    new Map([
      [
        -1,
        {
          var1: "Base radius of travel.",
          var2: "Additional units to travel in the forward direction.",
          var3: "Travel speed.",
        },
      ],
    ]),
  ],
  [
    SA2Object.DLCONT,
    new Map([[18, { var1: "If value is odd, the box is shaded." }]]),
  ],
  [
    SA2Object.DMARK,
    new Map([
      [
        32,
        {
          var1: "Icon that appears: Even numbers are star, odd numbers are moon.",
        },
      ],
    ]),
  ],
  [
    SA2Object.DMK,
    new Map([
      [
        44,
        {
          var1: "Value % 2 is icon: 0 is star, 1 is moon. If value / 2 = 1, the ring will be shaded.",
        },
      ],
    ]),
  ],
  [
    SA2Object.DOBJF,
    new Map([
      [
        -1,
        {
          var1: "Type of box: 0 has Gun Hawk parts in it, 1 is normal, 2 has dark sides, 3 has darker sides, 4 is like 2 but with a red tint.",
        },
      ],
    ]),
  ],
  [
    SA2Object.DOOR,
    new Map([
      [
        -1,
        {
          xRot: "Tells the game which model to use and direction to slide. 0 is a wall door with a slot, 1 is a ground door, 2 is a ground door with a slot, 3 is wall door, 4 is slotted ground door that comes out rather than opening.",
          zRot: "If hundreds digit is odd, the door shrinks a little. Tens/ones digits are an ID that tells the game which hourglass opens the door.",
          var3: "Color of door, based on value % 4: 0 is blue-tinted, 1 is green-tinted, 2 is red-tinted, 3 is no tint.",
        },
      ],
    ]),
  ],
  [
    SA2Object.DOOR_LIGHT,
    new Map([
      [
        -1,
        {
          var3: "Value % 3 is color: 0 is blue, 1 is green, 2 is red. (Value / 3) % 2 is number of sides: 0 is 3, 1 is 4. 3-sided frames don't have a floor.",
        },
      ],
    ]),
  ],
  [
    SA2Object.DRILLCOL,
    new Map([
      [
        43,
        {
          xRot: "COL spawns drill, SPEED sets speed?",
          var1: "Radius of trigger.",
          var2: "How long before the effect should take place?",
          var3: "On speed type, the speed to set the drill.",
        },
      ],
    ]),
  ],
  [
    SA2Object.DYNAMITE,
    new Map([
      [
        -1,
        {
          xRot: "Thousands/hundreds digit rotate the object, which is unusual for something that has a second purpose. Tens/ones digits are ID that tells the game which objects affected by dynamite explosions to trigger when it is blown up. All DYNAMITE sharing this ID must be destroyed before the object triggers.",
        },
      ],
    ]),
  ],
  [
    SA2Object.E_1000,
    new Map([
      [
        -1,
        {
          xRot: "Number of bullet rounds fired at a time.",
          yRot: "In hunting stages, the tens/ones places correspond to the ID of an associated enemy piece. FF indicates that there isn't one. In other stages, those digits are an ID that tells the game which doors (SHUTTER, CAGE/CAGEB/CAGEC/CAGED) to open after the enemy is destroyed.",
          var1: "Type of E-1000: 0 is stationary, 1 is moving.",
          var2: "Bullet speed.",
          zRot: "Time, in frames, between firings.",
          var3: "Radius of vision, in game units.",
        },
      ],
    ]),
  ],
  [
    SA2Object.E_AI,
    new Map([
      [
        -1,
        {
          xRot: "On gunned types, tens/ones digits are number of bullets to fire at a time. On laser types, is the length of the laser.",
          var1: "Type of Hunter: 0 is activating, 1 is moving, 2 is activating laser gun, 3 is moving laser gun, 4 is activating glue gun, 5 is shield laser gun, 6 is dropping, 7 is dropping laser gun, 8 is dropping glue gun, 9 does nothing.",
          var2: "Bullet/laser/glue speed.",
          yRot: "In hunting stages, the tens/ones places correspond to the ID of an associated enemy piece. FF indicates that there isn't one. In other stages, those digits are an ID that tells the game which doors (SHUTTER, CAGE/CAGEB/CAGEC/CAGED) to open after the enemy is destroyed.",
          zRot: "Time, in frames, between firings.",
          var3: "Integer adds to the radius of vision, which starts at 60 game units. Decimal value * 10 is forward displacement of vision sphere.",
        },
      ],
    ]),
  ],
  [
    SA2Object.E_AKAHIGE,
    new Map([
      [
        -1,
        {
          xRot: "",
          var1: "Type of Phoenix: 0 is 3 bombs, 1 is 6 bombs",
          var2: "adds to wandering distance from its spawn point, which starts at 56.",
          yRot: "In hunting stages, the tens/ones places correspond to the ID of an associated enemy piece. FF indicates that there isn't one. In other stages, those digits are an ID that tells the game which doors (SHUTTER, CAGE/CAGEB/CAGEC/CAGED) to open after the enemy is destroyed.",
          zRot: "",
          var3: "Radius of vision, in game units.",
        },
      ],
    ]),
  ],
  [
    SA2Object.E_BATABATA,
    new Map([
      [
        -1,
        {
          var1: "How far back (relative to Chomper's rotation) to spawn the Chomper. The Chomper's speed (not completion time) is constant.",
          yRot: "Counterclockwise rotation of spawn cylinder (for determining forward direction).",
          var2: "How far down to spawn the Chomper. The Chomper's speed (not completion time) is constant.",
          zRot: "Extra Y Rotation of the Chomper.",
          var3: "Integer adds or subtracts to the radius of spawn cylinder, which starts at 60. Decimal shifts the spawn circle backward (relative to Y Rotation) by 10 units per .01.",
        },
      ],
    ]),
  ],
  [
    SA2Object.E_BEETON,
    new Map([
      [
        -1,
        {
          xRot: "Number of bullets to fire in succession.",
          var1: "Distance the Buzzbomber will fly in from, in game units.",
          var2: "Adds or subtracts to the radius of vision, which starts at 60.",
          yRot: "In hunting stages, the tens/ones places correspond to the ID of an associated enemy piece. FF indicates that there isn't one. In other stages, those digits are an ID that tells the game which doors (SHUTTER, CAGE/CAGEB/CAGEC/CAGED) to open after the enemy is destroyed.",
          zRot: "Additional frame delay between firings on top of the default 60.",
          var3: "Integer adds or subtracts to the radius of spawn cylinder, which starts at 60. Decimal shifts the spawn circle backward (relative to Y Rotation) by 1000 * the decimal, in units (10 units per .01).",
        },
      ],
    ]),
  ],
  [
    SA2Object.E_CHAOS,
    new Map([
      [
        -1,
        {
          xRot: "On most types, is laser length. On non-aiming types, the thousands/hundreds digits are the head's rotation speed, while the tens/ones are still laser length. Debug: PHASE is used on round type. On dividing types, is the X distance minis spawn and can move in.",
          var1: "Type of AC: 0 is tall, 1 is tall without tentacles, 2 is ceiling without tentacles, 3 is tall that doesn't aim, 4 is ceiling that doesn't aim, 5 is round, 6 is dividing, 7 is ceiling, 8 is revealing, 9 is also dividing (Debug: 100 BRIGHT).",
          var2: "On laser types, is laser speed. On dividing, the integer is an additional Y displacement for the parent. The first two decimal places are the number of minis to spawn.",
          yRot: "In hunting stages, the tens/ones places correspond to the ID of an associated enemy piece. FF indicates that there isn't one. In other stages, those digits are an ID that tells the game which doors (SHUTTER, CAGE/CAGEB/CAGEC/CAGED) to open after the enemy is destroyed.",
          zRot: "On most types, is the time in frames between each attack. On dividing types, is the Z distance minis spawn and can move in.",
          var3: "Integer adds to the radius of vision, which starts at 60 game units. Decimal value * 10 is forward displacement of vision sphere.",
        },
      ],
    ]),
  ],
  [
    SA2Object.E_EMI,
    new Map([
      [
        -1,
        {
          xRot: "On cannon type, affects the bomb type dropped: 0 is normal, 1 is live (explodes on contact), 2 is big, 3 is same as 1.",
          yRot: "In hunting stages, the tens/ones places correspond to the ID of an associated enemy piece. FF indicates that there isn't one. In other stages, those digits are an ID that tells the game which doors (SHUTTER, CAGE/CAGEB/CAGEC/CAGED) to open after the enemy is destroyed.",
          var1: "Type of Rhino: 0 is normal, 1 is spike, 2 is DOOL, 3 is cannon, 4 is armored.",
          var2: "On cannon type, time in frames between fires.",
          var3: "Integer adds to the radius of vision, which starts at 60 game units. Decimal value * 10 is forward displacement of vision sphere.",
        },
      ],
    ]),
  ],
  [
    SA2Object.E_GHOST,
    new Map([
      [
        -1,
        {
          yRot: "In hunting stages, the tens/ones places correspond to the ID of an associated enemy piece. FF indicates that there isn't one. In other stages, those digits are an ID that tells the game which doors (SHUTTER, CAGE/CAGEB/CAGEC/CAGED) to open after the enemy is destroyed.",
          var1: "Type of Ghost: 0 is wandering scaring, 1 is appearing scaring, 2 is wandering, 3 is grabbing, 4 is Boom Boo, 5 is floating in place. Types that aren't 2 or 4 cannot hold hunting pieces.",
          var2: "Adds to the radius of vision, which starts at 60 game units.",
          var3: "Adds to the wandering radius from its spawn point, which starts at 100.",
        },
      ],
    ]),
  ],
  [
    SA2Object.E_GOLD,
    new Map([
      [
        -1,
        {
          xRot: "Time, in frames, the Gold Beetle stays before disappearing.",
          var2: "Oscillation amount.",
          yRot: "In hunting stages, the tens/ones places correspond to the ID of an associated enemy piece. FF indicates that there isn't one. In other stages, those digits are an ID that tells the game which doors (SHUTTER, CAGE/CAGEB/CAGEC/CAGED) to open after the enemy is destroyed.",
          zRot: "Oscillation speed.",
          var3: "Radius of vision, in game units.",
        },
      ],
    ]),
  ],
  [
    SA2Object.E_KUMI,
    new Map([
      [
        -1,
        {
          xRot: "On moving types, affects movement speed. It is capped at a rather low number. On gunned types, ones digit is the number of bullets fired at once. If tens digit isn't 0, PHASE& becomes PHASE&CHP. On bombing types, affects the bomb type dropped: 0 is normal, 1 is live (explodes on contact), 2 is big, 3 is the same as 1. On spring types, multiplies the spring's power.",
          yRot: "In hunting stages, the tens/ones places correspond to the ID of an associated enemy piece. FF indicates that there isn't one. In other stages, those digits are an ID that tells the game which doors (SHUTTER, CAGE/CAGEB/CAGEC/CAGED) to open after the enemy is destroyed.",
          zRot: "On normal/moving, gunned, and spring types, is oscillation speed. It fades away on moving types. On bombing types, is rotation speed around its center. The Beetle faces backwards from the direction of positive rotation. Ones digit % 2 is draw type: 0 is chunk?, 1 is direct",
          var1: "Type of Beetle: 0 is normal, 1 is moving, 2 is electric, 3 is electric and moving, 4 is gunned, 5 is appearing, 6 is spring, 7 is bombing. If decimal value isn't 00, SHADOW turns off.",
          var2: "On normal and spring types, affects oscillation amount. On gunned types, affects bullet speed. On electric and bombing types, is the time in frames between activations/drops.",
          var3: "On unarmed and gunned types, integer adds to the radius of vision, which starts at 60 game units. Decimal value * 10 is forward displacement of vision sphere. On bombing types, is the radius of patrol circle, in game units.",
        },
      ],
    ]),
  ],
  [
    SA2Object.E_KYOKO,
    new Map([
      [
        -1,
        {
          xRot: "Tens digit: If value % 2 is odd, smoke is turned on Type of Hawk: 0 is moving, 1 is gunned, 2 is moving and gunned, 3 is laser, 4 is glue gun. On laser types, hundreds and thousands place are the length of the laser.",
          var1: "On gunned and laser types, affects bullet speed.",
          var2: "Maximum Y distance from its spawn that it will chase you. Sign matters, as it will only go up or down, not both.",
          yRot: "In hunting stages, the tens/ones places correspond to the ID of an associated enemy piece. FF indicates that there isn't one. In other stages, those digits are an ID that tells the game which doors (SHUTTER, CAGE/CAGEB/CAGEC/CAGED) to open after the enemy is destroyed.",
          zRot: "On gunned types, is the number of bullets fired at once. On laser types, is the time in frames between fires.",
          var3: "Radius of vision, in game units.",
        },
      ],
    ]),
  ],
  [
    SA2Object.E_NAMIE,
    new Map([
      [
        -1,
        {
          xRot: "On bomb types, seems to affect the bombs; setting greater than 0 causes the bombs to explode immediately. On laser type, is the length of the laser.",
          var1: "Type of Hornet: 0 is 3 bombs, 1 is 6 bombs, 2 is 9 bombs, 3 is laser.",
          var2: "On bomb types, adds to wandering distance from its spawn point, which starts at 56. On laser types, laser speed.",
          yRot: "In hunting stages, the tens/ones places correspond to the ID of an associated enemy piece. FF indicates that there isn't one. In other stages, those digits are an ID that tells the game which doors (SHUTTER, CAGE/CAGEB/CAGEC/CAGED) to open after the enemy is destroyed.",
          zRot: "On laser types, is the delay, in frames, before firing.",
          var3: "Adds to the radius of vision, which starts at 60 game units.",
        },
      ],
    ]),
  ],
  [
    SA2Object.E_PATH,
    new Map([
      [
        -1,
        {
          xRot: "Thousands digit is movement pattern: 0 flies in from the back on the left and makes a big 180° arc around the object location before leaving. 1 flies in from the right, arcing upwards after reaching the object location. 2 flies in from the back left and circles before reaching the object location to leave again in the front left. 3 drops down from the left and flies to the right. 4 drops down, spirals counterclockwise twice in front of the object location, moves up once it reaches the left side, and then goes down forever. 5 flies in from the right in a wave motion. 6 flies in from the right in a straight line in front of the object location. 7 flies in from the right then cuts forward. 8 appears several hundred units to the left and makes a small circle, leaving in the back. 9-B are the same as 0-2, but in reverse. Tens digit: A flag of some sort, with three variables for% 2, / 2, and / 4. If value % 2 = 1, the enemy will stop instead of despawning and begin firing rapidly at the player. Ones digit: Type of enemy: 0 is gunned Beetle, 1 is bombing Beetle, 2 is gunned Hawk, 3 is backwards-facing gunned Hawk.",
          var1: "Digit is X displacement of trigger hitbox. Decimal scales the radius, with the final amount being equal to 10+(4*value).",
          yRot: "Debug: Ones digit is an ID?",
          var2: "Digit is Y displacement of trigger hitbox. Decimal starts the enemy at a certain position along the path, using the same system as Z Rotation below. This means that the positions are fixed and differ on each flight pattern, and only values 0-15 will be valid. Some patterns have numbers that are invalid anyway; any invalid number will cause the Beetle to glitch and spawn at the object's actual position.",
          zRot: "Thousands/hundreds digits: If the thousands digit is 0, the hundreds digit ignores attempts to fire before a certain position on the path. Tens/ones digits: If the tens digit is 0, the ones digit ignores attempts to fire after a certain position on the path. The hundreds and ones digits use the same scale, which has fixed positions for each flight pattern for each value.",
        },
      ],
    ]),
  ],
  [
    SA2Object.E_PATHCHAOS,
    new Map([
      [
        -1,
        {
          xRot: "Thousands digit: Movement pattern: 0 flies in from the back on the left and makes a big 180° arc around the object location before leaving. 1 flies in from the right, arcing upwards after reaching the object location. 2 flies in from the back left and circles before reaching the object location to leave again in the front left. 3 drops down from the left and flies to the right. 4 drops down, spirals counterclockwise twice in front of the object location, moves up once it reaches the left side, and then goes down forever. 5 flies in from the right in a wave motion. 6 flies in from the right in a straight line in front of the object location. 7 flies in from the right then cuts forward. 8 appears several hundred units to the left and makes a small circle, leaving in the back. Tens digit: A flag of some sort, with two variables for % 2 and / 2. If value % 2 = 1, the enemy will stop instead of despawning and begin firing at the player. Ones digits: Laser speed.",
          var1: "Digit is X displacement of trigger hitbox. Decimal is scale of trigger hitbox, with original size at 6 units.",
          var2: "Digit is Y displacement of trigger hitbox. Decimal starts the enemy at a certain position along the path, using the same system as Z Rotation below. This means that the positions are fixed and differ on each flight pattern, and only values 0-15 will be valid. Some patterns have numbers that are invalid anyway; any invalid number will cause the Chaos to glitch and spawn at the object's actual position.",
          yRot: "In hunting stages, the tens/ones places correspond to the ID of an associated enemy piece. FF indicates that there isn't one. In other stages, those digits are an ID that tells the game which doors (SHUTTER, CAGE/CAGEB/CAGEC/CAGED) to open after the enemy is destroyed.",
          zRot: "Thousands/hundreds digits: If the thousands digit is 0, the hundreds digit stops firing before an amount of time. 1 is negligible, 2 is ~21 seconds, and >2 is too large to matter. Tens/ones digits: If the tens digit is 0, the ones digit ignores attempts to fire after a certain position on the path. The hundreds and ones digits use the same scale, which has fixed positions for each flight pattern for each value.",
          var3: "Digit is Z displacement of trigger hitbox. Decimal is movement speed.",
        },
      ],
    ]),
  ],
  [
    SA2Object.E_SARU,
    new Map([
      [
        -1,
        {
          xRot: "If thousands digit > 0, forces the Ukiki to stand on the ground. If hundreds digit > 0, On normal types, affects the bomb type dropped: 0 is normal, 1 is sensitive (explodes on contact), 2 is big, 3 is sensitive with a white octagon (presumably supposed to be fire judging from the debug line)",
          var1: "Digit is type of Ukiki: 0 is normal, 1 dances in a circle with frequent rests, 2 dances in a circle with infrequent rests.",
          var2: "On dancing types, radius of circles it will dance in, with ~45 units added.",
          yRot: "In hunting stages, the tens/ones places correspond to the ID of an associated enemy piece. FF indicates that there isn't one. In other stages, those digits are an ID that tells the game which doors (SHUTTER, CAGE/CAGEB/CAGEC/CAGED) to open after the enemy is destroyed.",
          zRot: "Time, in frames, between throws.",
          var3: "Radius of vision, in game units.",
        },
      ],
    ]),
  ],
  [
    SA2Object.E_SHOUKO,
    new Map([
      [
        -1,
        {
          xRot: "Thousandths and hundreds digit is a delay before firing bombs, possibly in tenths of a second. Tens digit is flight pattern: 0 flies in and circles around to head back the way it came; 1 flies down and then back up in a shallow V-shape. Ones digit is plane type: 0 uses guns; 1 drops bombs behind, at, and ahead of the target; 2 drops bombs behind and ahead of the target; 3 drops a bomb at the target. The gun type has the plane turn around when its movement ends and approach a target location. It is equipped with two machine guns that target the player within a conical range of its direction of travel.",
          var1: "On bombing type, X coordinate of where to drop bombs. On gunned type, X coordinate to approach and stop at.",
          yRot: "Ones digit is an ID that tells the game which trigger (E SW SHOUKO) activates the plane.",
          var2: "On bombing type, Y coordinate of where to drop bombs. On gunned type, Y coordinate to approach and stop at.",
          zRot: "Number of units behind/ahead of the target to drop additional bombs.",
        },
      ],
    ]),
  ],
  [
    SA2Object.E_SW_SHOUKO,
    new Map([
      [
        -1,
        {
          xRot: "If this value and Z Rotation are identical to the corresponding values of a triggered E SHOUKO, instead of despawning, the plane will become a slow-moving enemy with two machine guns that target the player.",
          var1: "X Scale of cube, radius of sphere.",
          yRot: "Ones digit is an ID that tells the game which airplanes to trigger.",
          zRot: "If this value and X Rotation are identical to the corresponding values of a triggered E SHOUKO, instead of despawning, the plane will become a slow-moving enemy with two machine guns that target the player.",
        },
      ],
    ]),
  ],
  [
    SA2Object.E_UNI,
    new Map([
      [
        -1,
        {
          yRot: "In hunting stages, the tens/ones places correspond to the ID of an associated enemy piece. FF indicates that there isn't one. In other stages, those digits are an ID that tells the game which doors (SHUTTER, CAGE/CAGEB/CAGEC/CAGED) to open after the enemy is destroyed.",
          var1: "Type of Unidus: 0 is spiked, 1 is fiery.",
          var2: "",
          var3: "Adds to the wandering distance from its spawn point, by a factor of ~1.5x the value. It starts at 40.",
        },
      ],
    ]),
  ],
  [
    SA2Object.EECONT,
    new Map([
      [
        -1,
        {
          var1: "Extra units at each end of travel, used for fading the container in/out of existence.",
          var2: "Distance to travel.",
          var3: "Travel speed.",
        },
      ],
    ]),
  ],
  [
    SA2Object.EFFOBJ0,
    new Map([
      [
        -1,
        {
          xRot: "Thousands/hundreds digits is the spawn rate of particles. Tens/ones digits are type of particle: 0 is water splashes, 1 is explosions, 2 is sparkles, 3 is dark-colored dust clouds, 4 is Ring sheen, 5 is short-lived white smoke, 6 is longer-lived white smoke, 7 is snow puffs, 8 is dirt clods (gravity), 9 is tiny red particles (gravity, don't go below starting point), A is tiny sparks (gravity, don't go below starting point), B is fire puffs, C is dispersing white smoke, D is snow clouds, E is faint mud puffs, F is downward-shooting red/white sparks, 10 is water globs, 11 is poison gas puffs",
          var1: "Vertical speed of particles.",
          var2: "Horizontal range of particles.",
          var3: "Scales particle effect.",
        },
      ],
    ]),
  ],
  [
    SA2Object.ELV,
    new Map([
      [
        -1,
        {
          xRot: "Value % 2 is elevator type: 0 is two-way, 1 is one-way.",
          var1: "X Coordinate to move to.",
          var2: "Y Coordinate to move to.",
          var3: "Z Coordinate to move to.",
        },
      ],
    ]),
  ],
  [
    SA2Object.EMERALD,
    new Map([
      [
        -1,
        {
          xRot: "ID of the matching piece in big-endian order. i.e. 112 is piece 0x1201. Debug name is XY0. A is piece 3, B is piece 2, C is piece 1, ? is M5 or enemy.",
          var1: "On moving pieces, determines the movement pattern. Each integer has an assigned pattern by stage. On 2P pieces, is an actual X Scale to the area the piece can spawn in.",
          var2: "Radius of hitbox.",
          var3: "On moving pieces, determines movement speed, with -3 serving as 0. On 2P pieces, is an actual Z Scale to the area the piece can spawn in.",
        },
      ],
    ]),
  ],
  [
    SA2Object.FAN,
    new Map([
      [-1, { var1: "Scales whole object.", zRot: "Rotation speed." }],
      [
        16,
        {
          var1: "If value is odd, fan will be shaded.",
          var2: "Scales the fan.",
          zRot: "Fan rotation speed. Can be negative, turning it the other way.",
          var3: "Scales the square pillar that the fan is mounted to.",
        },
      ],
    ]),
  ],
  [
    SA2Object.FB2,
    new Map([
      [
        44,
        {
          var1: "Rotation speed. Centered around -0.5. If value is >0, meteor doesn't deal damage.",
          var2: "Radius of movement, multiplied by ~50 and centered around -1.",
        },
      ],
    ]),
  ],
  [
    SA2Object.FCG_CYL0,
    new Map([
      [
        40,
        {
          xRot: "Turn speed. Values > 8000 are treated as if they counted down from 0. Affects Shadow's turning around the object, too, but they're far from 1-to-1.",
          var3: "Radius of gravity pull from center axis. The cylinder is 30 units in radius.",
        },
      ],
    ]),
  ],
  [
    SA2Object.FCG_CYL1,
    new Map([
      [
        40,
        {
          xRot: "Turn speed. Values > 8000 are treated as if they counted down from 0. Affects Shadow's turning around the object, too, but they're far from 1-to-1.",
          var3: "Radius of gravity pull from center axis. The cylinder is 30 units in radius.",
        },
      ],
    ]),
  ],
  [
    SA2Object.FENCE,
    new Map([
      [
        -1,
        {
          var2: "How many fences to place side by side, with 0 = 1. Positive extends in direction of rotation, negative goes in the other way.",
          zRot: "If value is odd, fence will be shaded.",
        },
      ],
      [44, { var1: "Movement speed of the green lights in the top rail." }],
    ]),
  ],
  [SA2Object.FIRE2, new Map([[21, { var1: "Scales the whole model." }]])],
  [SA2Object.FIRE3, new Map([[21, { var1: "Scales the whole model." }]])],
  [SA2Object.FIRE4, new Map([[21, { var1: "Scales the whole model." }]])],
  [
    SA2Object.FIREBALL,
    new Map([
      [-1, { var1: "Radius of trigger for meteor to prime and explode." }],
      [40, { var2: "X Rotation speed.", var3: "Y Rotation speed." }],
    ]),
  ],
  [
    SA2Object.FIREPOT,
    new Map([
      [
        -1,
        { var1: "Scales the radius of the pot.", var3: "Color, based on value % 3: 0 is blue, 1 is green, 2 is red." },
      ],
    ]),
  ],
  [
    SA2Object.FIRZIZ,
    new Map([
      [
        -1,
        {
          xRot: "Toggle on fire-breathing ability. Even numbers breathe fire, odd ones don't.",
          var1: "Multiplier on the length of the fire.",
          var2: "Number of frames that the skull spends with its mouth open, starting at 120.",
          zRot: "On fire-breathing type, frames in between each puff of fire.",
          var3: "Number of frames that the skull spends with its mouth closed, starting at 120.",
        },
      ],
    ]),
  ],
  [
    SA2Object.FISH,
    new Map([
      [
        18,
        {
          var1: "X Scale of the box the fish will swim in.",
          var2: "Y Scale of the box the fish will swim in.",
          zRot: "Tens/ones digit: Number of fish.",
          var3: "Z Scale of the box the fish will swim in.",
        },
      ],
    ]),
  ],
  [
    SA2Object.FLAG,
    new Map([[16, { zRot: "Value % 2 is color: 0 is red, 1 is blue." }]]),
  ],
  [
    SA2Object.FLOWER,
    new Map([
      [
        18,
        {
          var1: "Scales whole object.",
          var3: "If value is odd, the plant is shaded.",
        },
      ],
    ]),
  ],
  [
    SA2Object.FOGCOL,
    new Map([
      [
        27,
        { xRot: "Transition time to/from darkness on enter/exit, in frames." },
      ],
    ]),
  ],
  [
    SA2Object.FRSTAGE,
    new Map([
      [
        -1,
        {
          xRot: "Each digit is a switch for a railing on a side. With rotation ABCD, A is back, B is right, C is front, D is left.",
        },
      ],
    ]),
  ],
  [
    SA2Object.G_LIGHT_SW,
    new Map([
      [
        -1,
        {
          var1: "X Scale of cube, radius of sphere.",
          zRot: "Ones digit % 2 is shape: 0 is cube, 1 is sphere.",
        },
      ],
    ]),
  ],
  [
    SA2Object.G_RING,
    new Map([
      [
        -1,
        {
          xRot: "Number of rings.",
          var1: "Units on the X axis between Rings.",
          var2: "Units on the Y axis between Rings.",
          var3: "Units on the Z axis between Rings.",
        },
      ],
    ]),
  ],
  [
    SA2Object.GAKE,
    new Map([
      [
        3,
        {
          xRot: "If value is odd, the platforms will fall much slower and their resting places are abovewater.",
          var1: "Range of the trigger on the falling platform from the object's position.",
        },
      ],
    ]),
  ],
  [
    SA2Object.GATE,
    new Map([
      [-1, { var1: "", var2: "Number of seconds to add to the time limit." }],
      [43, { var1: "" }],
    ]),
  ],
  [
    SA2Object.GATE2,
    new Map([
      [-1, { var1: "", var2: "Number of seconds to add to the time limit." }],
    ]),
  ],
  [
    SA2Object.GLIND,
    new Map([
      [
        22,
        {
          xRot: "Rotates along the rail's axis. Z Rotation doesn't work.",
          var1: "Scales the rail.",
        },
      ],
      [30, { var1: "Speed of light effects that travel across the rail." }],
    ]),
  ],
  [
    SA2Object.GLIND_B,
    new Map([
      [30, { var1: "Speed of light effects that travel across the rail." }],
    ]),
  ],
  [
    SA2Object.GLINDRB,
    new Map([
      [
        -1,
        {
          var1: "Value % 3 is size of rail: 0 is short, 1 is medium, 2 is long.",
          var2: "Speed of light effects that travel across the rail.",
        },
      ],
    ]),
  ],
  [
    SA2Object.GOALRING,
    new Map([
      [
        -1,
        {
          xRot: "Type of objective. 0 is Goal Ring, 1 is Lost Chao, 2 is a non-rotating Goal Ring.",
          var3: "Defaults to -160 if set to 0.",
        },
      ],
    ]),
  ],
  [
    SA2Object.GRAV_SW,
    new Map([
      [
        44,
        {
          xRot: "Shape of gravity: 0 is sphere, 1 is two spheres, 2 is sphere for ignoring changed gravity. Debug: Object location indicated by spinning Chao Box!",
          var1: "Radius of sphere/s.",
          var2: "On two-sphere type, how far each sphere is from the object location (one above, one below object rotation)",
        },
      ],
    ]),
  ],
  [SA2Object.GRAVE, new Map([[21, { var1: "Scales the whole object." }]])],
  [
    SA2Object.GRVSTONE,
    new Map([
      [5, { xRot: "Color of the gravestone's mound. 0 is brown, 1 is red." }],
    ]),
  ],
  [
    SA2Object.GSTRAIN,
    new Map([
      [
        5,
        {
          xRot: "An ID that tells the game which train pattern to use. 0 is back and forth, 1 is capsule-shaped, 2 is Pumpkin Mountain, 3 is Church Mountain, 4 is Wander around in a circle. Values 2+ know where the train is supposed to be.",
          var1: "Travel speed.",
          var2: "Most significant byte of the ID of the piece the train spawns, plus 1. For example, 1 is for piece 0x0007.",
          zRot: "An ID that tells the game which switch needs to be turned on for the train to spawn. The train is always active if there is no switch of that ID.",
          var3: "For the linear path, scales the size of it. For other paths, offsets the position along the path that the train will blow its whistle.",
        },
      ],
    ]),
  ],
  [
    SA2Object.GSWITCH2,
    new Map([
      [
        22,
        {
          var1: "Direction to change gravity to, relative to switch's rotation. Based on value % 4: 0/1 is upward, 2 is leftward, 3 is rightward.",
        },
      ],
    ]),
  ],
  [
    SA2Object.GUIDANCE,
    new Map([
      [
        13,
        {
          xRot: "",
          var1: "X displacement of hitbox.",
          yRot: "",
          var2: "Y displacement of hitbox.",
          zRot: "",
        },
      ],
    ]),
  ],
  [
    SA2Object.HAMMER,
    new Map([
      [
        -1,
        {
          xRot: "Assigns a waiting period at the peak amplitude. If the hundreds place != 0, the starting position is the bottom of the movement; otherwise, it's the top.",
          var1: "XZ plane scale. Centered at -1.",
          var2: "Tens/ones digits offset the platform's cycle.",
          zRot: "Speed. In Mission Street, if the thousands digit is odd, a shadow will be placed underneath the pillar.",
          var3: "Oscillation amount, in game units.",
        },
      ],
    ]),
  ],
  [
    SA2Object.HAMMER3,
    new Map([
      [
        -1,
        { var1: "XZ plane scale. Centered at -1.", var2: "Centered at -1." },
      ],
      [
        17,
        {
          xRot: "Final rotation upwards from being flat after the pillar falls; the number is % 4000 (90 degrees) to prevent pillars from going in strange directions.",
          zRot: "An ID that tells the game which dynamite packs need to be blown up before the pillar will fall.",
        },
      ],
    ]),
  ],
  [
    SA2Object.HAMMER2,
    new Map([
      [
        14,
        {
          xRot: "Rotation speed.",
          var1: "Scales pillar length. Centered at -1.",
          var2: "XY plane scale. Centered at -1.",
          var3: "",
        },
      ],
    ]),
  ],
  [
    SA2Object.HANGRING,
    new Map([
      [
        28,
        {
          var1: "Length of the chains on either side. Base size is 40 units.",
          var3: "Rotation speed.",
        },
      ],
    ]),
  ],
  [
    SA2Object.HASHIRA,
    new Map([
      [
        23,
        {
          xRot: "Rotates counterclockwise which face the dynamite packs are on.",
          zRot: "Composition of the object. Each digit is the number of an object to stack on each other. The thousands and tens places are platforms, and the hundreds and ones places are the dynamite pillars.",
        },
      ],
    ]),
  ],
  [SA2Object.HATA, new Map([[23, { var1: "Scales whole object." }]])],
  [
    SA2Object.HATA2,
    new Map([[23, { var1: "Scales whole object.", var3: "" }]]),
  ],
  [SA2Object.HATADAI, new Map([[21, { var1: "Scales whole object." }]])],
  [
    SA2Object.HATCH_A,
    new Map([
      [
        24,
        {
          xRot: "An ID that tells the game which dynamite packs need to be destroyed for the hatch to release. 0 makes the hatch indestructible. Also of note is that the push effect and the kill plane are tied to the hatch itself.",
        },
      ],
    ]),
  ],
  [
    SA2Object.HATCH_B,
    new Map([
      [
        24,
        {
          xRot: "An ID that tells the game which dynamite packs need to be destroyed for the hatch to release. 0 makes the hatch indestructible. Also of note is that the push effect and the kill plane are tied to the hatch itself.",
        },
      ],
    ]),
  ],
  [
    SA2Object.HIDECOLI,
    new Map([
      [
        26,
        {
          var1: "X Scale for cube, radius for sphere and cylinder.",
          var2: "Y Scale for cube and cylinder.",
          zRot: "Ones digit % 4 is shape: 0 is cube, 1 is sphere, 2 is cylinder, 3 is nothing.",
        },
      ],
    ]),
  ],
  [
    SA2Object.HIDELIGHT,
    new Map([
      [
        26,
        {
          var1: "X Scale for cube, radius for sphere and cylinder.",
          var2: "Y Scale for cube and cylinder.",
          zRot: "Ones digit % 4 is shape: 0 is cube, 1 is sphere, 2 is cylinder, 3 is nothing.",
        },
      ],
    ]),
  ],
  [
    SA2Object.INDCTR,
    new Map([[43, { var1: "If value is >0, uses the taller wall." }]]),
  ],
  [
    SA2Object.IRONBALL2,
    new Map([
      [
        -1,
        {
          var1: "Radius of spike balls. Set to -1 to make a stationary spike ball.",
          yRot: "Affects oscillation speed.",
          var2: "Speed. Centered around -1.",
          zRot: "If value % 2 is odd, the particle effect turns off. If value / 2 is odd, the object will be allowed to float and oscillate. Otherwise, it will stick to geometry below it.",
          var3: "Distance from position to oscillate.",
        },
      ],
    ]),
  ],
  [
    SA2Object.IRONBAR,
    new Map([
      [
        -1,
        {
          xRot: "",
          var1: "X coordinate to swing to.",
          var2: "Y coordinate to swing to.",
          zRot: "Swinging direction. 0 goes up in the front, 1+ goes up in the back.",
          var3: "Z coordinate to swing to.",
        },
      ],
      [
        28,
        {
          xRot: "Scales how far down the shadow can appear.",
          zRot: "Scales hitbox on swinging.",
        },
      ],
    ]),
  ],
  [
    SA2Object.ITEMBOX,
    new Map([
      [
        -1,
        {
          var1: "Determines contents: 0 is speed shoes, 1 is 5 rings, 2 is extra life, 3 is 10 rings, 4 is 20 rings, 5 is shield, 6 is bomb, 7 is health, 8 is electric shield, 9 is nothing, 10+ is invincibility",
          var2: "Y Rotation of the icon inside of the item box.",
        },
      ],
    ]),
  ],
  [
    SA2Object.ITEMBOXAIR,
    new Map([
      [
        -1,
        {
          var1: "Determines contents: 0 is speed shoes, 1 is 5 rings, 2 is extra life, 3 is 10 rings, 4 is 20 rings, 5 is shield, 6 is bomb, 7 is health, 8 is electric shield, 9 is nothing, 10+ is invincibility",
          var2: "Y Rotation of the icon inside of the item box.",
        },
      ],
    ]),
  ],
  [
    SA2Object.ITEMBOXBALLOON,
    new Map([
      [
        -1,
        {
          var1: "Determines contents: 0 is speed shoes, 1 is 5 rings, 2 is extra life, 3 is 10 rings, 4 is 20 rings, 5 is shield, 6 is bomb, 7 is health, 8 is electric shield, 9 is nothing, 10+ is invincibility",
          var2: "Y Rotation of the icon inside of the item box.",
        },
      ],
    ]),
  ],
  [
    SA2Object.KDITEMBOX,
    new Map([
      [
        -1,
        {
          var1: "Determines contents: 0 is speed shoes, 1 is 5 rings, 2 is extra life, 3 is 10 rings, 4 is 20 rings, 5 is shield, 6 is bomb, 7 is health, 8 is electric shield, 9 is nothing, 10+ is invincibility",
          var2: "Y Rotation of the icon inside of the item box.",
        },
      ],
    ]),
  ],
  [
    SA2Object.SG_ITEMBOX,
    new Map([
      [
        -1,
        {
          var1: "Determines contents: 0 is speed shoes, 1 is 5 rings, 2 is extra life, 3 is 10 rings, 4 is 20 rings, 5 is shield, 6 is bomb, 7 is health, 8 is electric shield, 9 is nothing, 10+ is invincibility",
          var2: "Y Rotation of the icon inside of the item box.",
        },
      ],
    ]),
  ],
  [
    SA2Object.JO,
    new Map([
      [
        3,
        {
          var1: "Type of object: 0 is half of mossy rock, 1 is flat mossy rock, 2+ is frond-leaf tree",
        },
      ],
      [
        4,
        {
          var1: "Type of object: 0 is diagonal frond-leaf tree, 1 is square wooden platform, 2+ is wide wooden platform.",
        },
      ],
    ]),
  ],
  [
    SA2Object.JO2,
    new Map([
      [
        4,
        {
          var1: "Type of object: 0 is diagonal frond-leaf tree, 1 is square wooden platform, 2+ is wide wooden platform.",
        },
      ],
    ]),
  ],
  [
    SA2Object.JP,
    new Map([
      [
        3,
        {
          var1: "Type of plant: 0 is giant wall vines, 1 is broad red-leaf plant, 2 is broad green-leaf plant, 3 is skinny red-leaf plant, 4 is bush, 5 is curved hanging vines, 6 is fan-leaf plant, 7 is green frond plant, 8 is red frond plant, 9 is big red flowers, 10 is skinny tree, 11 is thick tree, 12 is hanging skinny-leaf branch, 13 is half of trunk with small leaves, 14 is hanging broad-leaf branch, 15 is crescent-shaped frond tree, 16 is flat hanging vines, 17 is hanging plant stalks.",
        },
      ],
      [
        4,
        {
          var1: "Type of plant: 0 is green-and-red-leaved plant, 1 is curved wall moss, 2 is red fern, 3 is floor moss, 4 is red flower, 5 is green needle bush, 6 is green frond plant, 7 is red frond plant, 8 is small, patterened leaf plant, 9 is diagonal needle-leaf tree, 10 is big needle-leaf tree, 11 is hanging frond branch, 12 is thick palm-like tree, 13 is hanging broad-leaf branch, 14 is crescent-shaped frond tree, 15 is flat hanging vines.",
        },
      ],
    ]),
  ],
  [SA2Object.JUMP_PANEL, new Map([[-1, { var1: "", var2: "" }]])],
  [
    SA2Object.KAITEN,
    new Map([
      [
        21,
        {
          xRot: "Rotation speed.",
          var1: "Scales whole object.",
          zRot: "Value % 2 is rotation direction: 0 is counterclockwise, 1 is clockwise.",
        },
      ],
      [
        23,
        {
          xRot: "Oscillation speed - thousands/hundreds digits control vertical, tens/ones control horizontal",
          yRot: "Tens and ones digit offset platform's cycle.",
          var2: "Vertical oscillation amount. Y Position is the top of the oscillation.",
          zRot: "Block rotation animation speed",
          var3: "Horizontal oscillation amount.",
        },
      ],
    ]),
  ],
  [SA2Object.KAME, new Map([[18, { var1: "", var2: "", zRot: "" }]])],
  [
    SA2Object.KAMOME,
    new Map([
      [
        -1,
        {
          xRot: "Number of seagulls/dragonflies/hawks, plus 1.",
          var1: "X Range to fly around in. Speed isn't affected, so larger distances means less spastic movements.",
          var2: "Y Range to fly around in. Speed isn't affected, so larger distances means less spastic movements.",
          var3: "Z Range to fly around in. Speed isn't affected, so larger distances means less spastic movements.",
        },
      ],
    ]),
  ],
  [
    SA2Object.KAZANI,
    new Map([
      [
        -1,
        {
          var1: "X Range to fly around in. Speed isn't affected, so larger distances means less spastic movements.",
          var2: "Y Range to fly around in. Speed isn't affected, so larger distances means less spastic movements.",
          var3: "Z Range to fly around in. Speed isn't affected, so larger distances means less spastic movements.",
        },
      ],
    ]),
  ],
  [
    SA2Object.KANBAN,
    new Map([
      [
        -1,
        {
          var1: "Contents of billboard: 0 is Chao Kindercarten (sic), 1 is Select Type?, 2 is SonicTeam, 3 is Sonic Spin Wheel, 4+ are Chao Kindercarten again.",
        },
      ],
    ]),
  ],
  [
    SA2Object.KARAMI,
    new Map([
      [
        3,
        {
          xRot: "Appears to do the same as Y Rotation",
          var1: "",
          yRot: "",
          var2: "",
          zRot: "Seems to function the same as ROTULTA's",
        },
      ],
    ]),
  ],
  [
    SA2Object.KASOKU,
    new Map([
      [
        -1,
        {
          var1: "Multiplier of speed. Defaults to 14 if less than 0.",
          var2: "Cooldown between uses, in frames. Locks control stick movement for the same duration. Defaults to 60 if less than 0.",
        },
      ],
    ]),
  ],
  [
    SA2Object.KAZOBJ,
    new Map([
      [
        24,
        {
          var1: "Shape of panel: 0 is rectangle, 1 is long rectangle, 2 is corner, 3 is L-shape, 4 is blank(?), 5 is a four-sided cube with another one well at ceiling-height, 6 is ceiling-level steel triangle corner, 7+ is a three-faced cube with a bright red stripe and a ceiling overhead.",
        },
      ],
      [
        27,
        {
          var1: "Model: 0 is a four-sided cube with another one well at ceiling-height, 1 is ceiling-level steel triangle corner, 2 is a three-faced cube with a bright red stripe and a ceiling overhead, 3 is glow shaped as a walkway corner rail, 4 is glow shaped as double walkway corner rails, 5 is glow shaped like straight walkway rails. 6 crashes the game.",
        },
      ],
    ]),
  ],
  [
    SA2Object.KDASIBA,
    new Map([
      [
        -1,
        { xRot: "An ID that tells the game which shrine activates the item." },
      ],
    ]),
  ],
  [
    SA2Object.KDWARPHOLE,
    new Map([
      [
        -1,
        {
          xRot: "An ID that tells the game which shrine activates the item.",
          var1: "X Coordinate to spawn the corresponding warp.",
          var2: "Y Coordinate to spawn the corresponding warp.",
          var3: "Z Coordinate to spawn the corresponding warp.",
        },
      ],
    ]),
  ],
  [
    SA2Object.KDITEMBOX,
    new Map([
      [
        -1,
        { xRot: "An ID that tells the game which shrine activates the item." },
      ],
    ]),
  ],
  [
    SA2Object.KDDOOR,
    new Map([
      [
        -1,
        {
          xRot: "An ID that tells the game which shrine activates the item, Hundreds digit is door orientation: 0 opens upward, 1 opens [right/left], 2 is also upward, 3 opens [left/right].",
        },
      ],
    ]),
  ],
  [
    SA2Object.DOORT,
    new Map([
      [
        -1,
        {
          xRot: "An ID that tells the game which shrine activates the item, Hundreds digit is door orientation: 0 opens upward, 1 opens [right/left], 2 is also upward, 3 opens [left/right]. If it's odd, it flips to be vertical. Debug: DOORT does not flip the names. It uses VERT while horizontal and HORZ while vertical",
        },
      ],
    ]),
  ],
  [
    SA2Object.KDDRNGL,
    new Map([
      [
        -1,
        {
          zRot: "An ID that tells the game which shrine activates the item.",
          var1: "Adds to the distance between rings, which starts at 10 game units.",
          var2: "Offset, in game units, of the last ring along the object's up axis. This is the Y axis by default, but matches rotation made to the object. The rings between the first and last are set to a curve that looks similar to a square root function, with more change near the beginning.",
          var3: "Number of rings. Caps at 8.",
        },
      ],
    ]),
  ],
  [
    SA2Object.KDDRNGC,
    new Map([
      [
        -1,
        {
          zRot: "An ID that tells the game which shrine activates the item.",
          var1: "A multiplier on the size of the circle that is about 1.2x larger than the radius. 10 units are added to the radius when the rings are loaded into the game.",
          var2: "Removes Rings, depending on (and % by) the number of Rings in the circle. (# - 1) will remove all Rings except the initial one. Only 4, 6, and 8 Rings have numbers with any other effect: setting to 1 (or 3 with 6) will remove every second Ring; setting to 2 with 6 or 3 with 8 will remove all but the initial Ring and its opposite.",
          var3: "Number of rings. Caps at 8.",
        },
      ],
    ]),
  ],
  [
    SA2Object.KD_SPRA,
    new Map([
      [
        -1,
        { var3: "An ID that tells the game which shrine activates the item." },
      ],
    ]),
  ],
  [
    SA2Object.KD_SPRB,
    new Map([
      [
        -1,
        { var3: "An ID that tells the game which shrine activates the item." },
      ],
    ]),
  ],
  [
    SA2Object.KDSPRING,
    new Map([
      [
        -1,
        { var3: "An ID that tells the game which shrine activates the item." },
      ],
    ]),
  ],
  [
    SA2Object.KDSPRINGB,
    new Map([
      [
        -1,
        { var3: "An ID that tells the game which shrine activates the item." },
      ],
    ]),
  ],
  [
    SA2Object.KEY,
    new Map([
      [
        28,
        {
          var3: "Tells the game which holes will accept which keys and which doors will open from it. Unlike other IDs, it only has two values for the two doors. Additionally, activating one hole will automatically activate all other holes and doors, and none of them can be reset once active. It also sets the appropriate blue (0) or green (1) tint and + (0) or – (1) key shape.",
        },
      ],
    ]),
  ],
  [
    SA2Object.KEYDOOR,
    new Map([
      [
        28,
        {
          var3: "Tells the game which holes will accept which keys and which doors will open from it. Unlike other IDs, it only has two values for the two doors. Additionally, activating one hole will automatically activate all other holes and doors, and none of them can be reset once active. It also sets the appropriate blue (0) or green (1) tint and + (0) or – (1) key shape.",
        },
      ],
    ]),
  ],
  [
    SA2Object.KEYHOLE,
    new Map([
      [
        28,
        {
          var3: "Tells the game which holes will accept which keys and which doors will open from it. Unlike other IDs, it only has two values for the two doors. Additionally, activating one hole will automatically activate all other holes and doors, and none of them can be reset once active. It also sets the appropriate blue (0) or green (1) tint and + (0) or – (1) key shape.",
        },
      ],
    ]),
  ],
  [
    SA2Object.KNUDAI,
    new Map([
      [
        -1,
        {
          xRot: "An ID that tells the game which shrine-activated item to activate with the shrine.",
        },
      ],
    ]),
  ],
  [
    SA2Object.KOTEIDAI,
    new Map([
      [
        23,
        {
          var1: "Scales both X and Z.",
          var3: "Adds pillar units to the base.",
        },
      ],
    ]),
  ],
  [
    SA2Object.LAZER,
    new Map([
      [
        -1,
        {
          xRot: "Outside of Security Hall, if value is odd, the laser wall becomes solid.",
          var1: "In Security Hall, scalse the laser's default size of 20 units, centered around -1. In other stages, is the number of units the laser is.",
          var2: "In Security Hall, amplitude of sinusoidal motion. In other stages, is a buffer in game units on each side of a laser in a set.",
          var3: "In Security Hall, oscillation speed. In other stages, is the number of lasers to stack on top of each other.",
        },
      ],
      [
        43,
        {
          xRot: "Thousands/hundreds digits rotate the capsule. Tens/ones digits rotate the laser's angle upon firing (but not its position)",
          var1: "Laser length.",
          var2: "Time, in frames, between each firing.",
          var3: "Speed of laser.",
        },
      ],
    ]),
  ],
  [
    SA2Object.LEAF,
    new Map([
      [
        18,
        {
          var1: "Scales whole object.",
          var3: "If value is odd, the plant is shaded.",
        },
      ],
    ]),
  ],
  [
    SA2Object.LEVUPDAI,
    new Map([
      [
        -1,
        {
          var1: "Which upgrade it is: 0 is Bounce Bracelet, 1 is Light Shoes, 2 is Sonic's Flame Ring, 3 is Air Shoes, 4 is Shadow's Flame Ring, 5 is Booster, 6 is Bazooka, 7 is Tails's Laser Blaster, 8 is Jet Engine, 9 is Protective Armor, 10 is Large Cannon, 11 is Eggman's Laser Blaster, 12 is Shovel Claws, 13 is Hammer Gloves, 14 is Air Necklace, 15 is Treasure Scope, 16 is Pick Nails, 17 is Iron Boots, 18 is Sonic MM, 19 is Shadow MM, 20 is Tails MM, 21 is Eggman MM, 22 is Knuckles MM, 23 is Rouge MM, 24 is Sonic's Ancient Light, 25 is Magic Gloves, 26 is Sunglasses, 27 is Shadow's Ancient Light",
          var2: "",
        },
      ],
    ]),
  ],
  [
    SA2Object.LIGHT,
    new Map([
      [21, { var1: "Scales whole object." }],
      [
        28,
        {
          var1: "Radius of effect.",
          var3: "Value % 3 is color: 0 is blue, 1 is green, 2 is orange.",
        },
      ],
    ]),
  ],
  [
    SA2Object.LIGHT_SW,
    new Map([
      [
        -1,
        {
          xRot: "Tens/ones digits are brightness level.",
          var1: "X Scale of cube, radius of sphere.",
          yRot: "Ones digit changes type. Unsure what they do.",
          zRot: "Ones digit % 2 is shape: 0 is cube, 1 is sphere.",
        },
      ],
    ]),
  ],
  [
    SA2Object.LIGHT_BCDE,
    new Map([
      [
        22,
        {
          var1: "Type of lights: 0 is an assortment of flashing lights, 1 and 2 are a smaller set of lights, and 3 is alternating trapezoid lights.",
        },
      ],
    ]),
  ],
  [
    SA2Object.LIGHTBAR,
    new Map([
      [
        -1,
        {
          var1: "Direction lights will sequence in. 0 is left-to-right, 1+ is right-to-left.",
        },
      ],
    ]),
  ],
  [
    SA2Object.LIGHTEFF,
    new Map([
      [
        -1,
        {
          var1: "Scales width (object is not axis-aligned).",
          var2: "Scales height (object is not axis-aligned).",
        },
      ],
    ]),
  ],
  [SA2Object.LINE, new Map([[44, { var1: "Animation speed." }]])],
  [
    SA2Object.LINKLINK,
    new Map([
      [
        -1,
        {
          xRot: "Time (in frames) until the current point combo runs out.",
          var1: "X Scale of cube, radius of sphere.",
          yRot: "Ones digit is the point bonus to give, indexed in ascending order (i.e. 1 is 100, 6 is 600, 7 is 800, 8 is 1000). Tens digit is the order, so 0 is first in a group, 1 is second in a group, 2 is third in a group, etc.",
          zRot: "Ones digit % 2 is shape: 0 is cube, 1 is sphere.",
        },
      ],
    ]),
  ],
  [
    SA2Object.LIONHEAD,
    new Map([
      [
        -1,
        {
          zRot: "If tens digit is set to A, spawns an animal. Ones digit is the tens digit of animal to randomly spawn from, i.e. 1 will spawn the animals of value 10 and 11. Debug mode: X is equal to the value of the tens digit, Y is animal type (A for 0, B for 1, C for 2).",
        },
      ],
    ]),
  ],
  [
    SA2Object.LOCKON,
    new Map([
      [
        43,
        {
          var1: "",
          var2: "If value = 0, uses green coloring. Otherwise, uses brown coloring.",
          zRot: "",
        },
      ],
    ]),
  ],
  [
    SA2Object.MACHINE,
    new Map([[24, { var3: "How fast the treads are moving." }]]),
  ],
  [
    SA2Object.MAP,
    new Map([
      [
        25,
        {
          var1: "X Position of the glowing light, relative to the center of the picture (first room on red path).",
          var2: "Y Position of the glowing light, relative to the center of the picture (first room on red path).",
          var3: "Color % 3 is map frame color: 0 is red, 1 is green, 2 is blue.",
        },
      ],
    ]),
  ],
  [
    SA2Object.MAT,
    new Map([
      [
        23,
        {
          var1: "Scales both X and Z directions.",
          var3: "Doesn't appear to do as debug claims.",
        },
      ],
    ]),
  ],
  [
    SA2Object.MDCONTWOOD,
    new Map([[-1, { var1: "Rotation speed, on all three axes." }]]),
  ],
  [
    SA2Object.IRON3,
    new Map([[-1, { var1: "Rotation speed, on all three axes." }]]),
  ],
  [
    SA2Object.SOLID3,
    new Map([[-1, { var1: "Rotation speed, on all three axes." }]]),
  ],
  [
    SA2Object.MECHA,
    new Map([
      [
        -1,
        {
          var3: "Value % 2 is corridor shape: 0 is curved, with object at arc's radial center, and 1 is straight, with bobect in the middle.",
        },
      ],
    ]),
  ],
  [
    SA2Object.METEO,
    new Map([
      [
        32,
        {
          var1: "If value is even, meteorite is small. If value is odd, it's large.",
        },
      ],
    ]),
  ],
  [
    SA2Object.METEO_MOVE,
    new Map([
      [
        -1,
        {
          var1: "Size of meteorite: 0 is big, 1 is medium, 2 is small, 3 is huge.",
          var2: "X Rotation speed.",
          var3: "Y Rotation speed."
        },
      ],
    ]),
  ],
  [
    SA2Object.METEO_SET,
    new Map([
      [
        -1,
        {
          var1: "Size of meteorite: 0 is big, 1 is medium, 2 is small, 3 is huge.",
          var2: "X Rotation speed.",
          var3: "Y Rotation speed."
        },
      ],
    ]),
  ],
  [
    SA2Object.METEOBULLET2,
    new Map([
      [-1, { var2: "X Rotation speed.", var3: "Y Rotation speed." }],
      [
        43,
        { var1: "If value is 0, meteorite is large. Otherwise, it's small." },
      ],
    ]),
  ],
  [
    SA2Object.METEO,
    new Map([[32, { var2: "X Rotation speed.", var3: "Y Rotation speed." }]]),
  ],
  [
    SA2Object.METEOBULLET,
    new Map([[-1, { var2: "X Rotation speed.", var3: "Y Rotation speed." }]]),
  ],
  [
    SA2Object.MHMISSILE,
    new Map([[10, { var1: "Presumably, triggers the rocket countdown." }]]),
  ],
  [
    SA2Object.MIINFO,
    new Map([
      [
        7,
        { var1: "Absolute value % 3 is sign label, equal to water level - 1." },
      ],
    ]),
  ],
  [
    SA2Object.MIKOSHI,
    new Map([
      [
        -1,
        { var3: "Color, based on value % 3: 0 is blue, 1 is green, 2 is red." },
      ],
    ]),
  ],
  [
    SA2Object.MINIMAL,
    new Map([
      [
        -1,
        {
          xRot: "If the hundreds digit is set to 2, the animal appears when you whistle for it. The tens and ones digit determine the animal type: The rare animal is value 0, and the other four animals are values 0x10, 0x11, 0x20, and 0x21. Values 12+ randomly spawns 10 or 11, Values 22+ randomly spawn 20 or 21, and values 30+ randomly spawn all four.",
          var1: "Radius of movement.",
          zRot: "Speed. Noticeable changes require changing at least the tens digit.",
        },
      ],
    ]),
  ],
  [
    SA2Object.MINITSUBO,
    new Map([
      [
        18,
        {
          zRot: "Tens digit determines whether an animal can pop out of the jar. The ones digit % 3 is the tens digit of the animals to spawn randomly, i.e. 1 will spawn the animals of values 10 and 11.",
        },
      ],
    ]),
  ],
  [
    SA2Object.MLIFT,
    new Map([
      [
        -1,
        {
          var1: "How high the lift will rise to. Debug: Rising part is 65 units tall. Is that an actual thing, and is it a maximum? It looks like there might be a minimum, too, as the part doesn't start on the ground.",
        },
      ],
    ]),
  ],
  [
    SA2Object.MODMOD,
    new Map([
      [-1, { zRot: "Value % 2 is shape: 0 is hexagonal prism, 1 is cube." }],
    ]),
  ],
  [SA2Object.MOTOOL, new Map([[6, { var1: "Rotation speed of wheel." }]])],
  [
    SA2Object.MOUTH,
    new Map([
      [
        -1,
        {
          var1: "Scales XZ plane. Centered at -1.",
          var2: "Centered at -1.",
          var3: "Color, based on value % 3: 0 is blue, 1 is green, 2 is red.",
        },
      ],
    ]),
  ],
  [
    SA2Object.MSGER,
    new Map([
      [
        -1,
        {
          var1: "Index of the mh####.prs file to load when touched.",
          var2: "Becomes LIGHT1 when value isn't 0",
        },
      ],
    ]),
  ],
  [
    SA2Object.MUJINGUN,
    new Map([
      [
        -1,
        {
          var1: "Rate of fire multiplier.",
          var2: "Projectile speed.",
          var3: "Integer is radius of vision. Decimal value * 10 is forward displacement of vision sphere.",
        },
      ],
    ]),
  ],
  [SA2Object.NEON, new Map([[28, { zRot: "Rotation speed." }]])],
  [SA2Object.NIGHTS, new Map([[14, { xRot: "Rotation speed." }]])],
  [SA2Object.NOINPCOL, new Map([[-1, { var1: "Radius." }]])],
  [
    SA2Object.OIL,
    new Map([
      [23, { var1: "Scales whole object.", var2: "Speed of the pump." }],
    ]),
  ],
  [
    SA2Object.ORE,
    new Map([
      [
        44,
        {
          var1: "If value is 0, uses a big crystal. Otherwise, 1 is small crystal.",
        },
      ],
    ]),
  ],
  [
    SA2Object.ORI,
    new Map([
      [
        -1,
        {
          xRot: "",
          zRot: "An ID that tells the game which ROCKETMISSSILE will destroy the cage.",
        },
      ],
    ]),
  ],
  [
    SA2Object.PAINTING,
    new Map([
      [
        -1,
        {
          var3: "Type of painting. Varies on the stage. Death Chamber: 0 has raven-headed men, 1 has fish-faced women, 2 has lion-headed men. Egg Quarters: 0 has cobras, 1 has fish-faced women, 2 has scorpions.",
        },
      ],
    ]),
  ],
  [SA2Object.PALM, new Map([[18, { var1: "Scales whole object." }]])],
  [
    SA2Object.PANELAREA,
    new Map([
      [
        -1,
        {
          xRot: "Value % 3 is color: 0 is blue, 1 is yellow, 2 is red. Tens place is type of panel: 0 is A, 1 is B, 2 is C.",
        },
      ],
    ]),
  ],
  [
    SA2Object.PIC,
    new Map([
      [
        -1,
        {
          var1: "(Ones digit - 1) % 3 is the tens digit of animal to randomly spawn from, i.e. 1 will spawn the animals of value 10 and 11. Won't spawn anything if set to 0. This functionality is Dreamcast-exclusive.",
        },
      ],
      [32, { var1: "Value % 3 is color: 0 is orange, 1 is blue, 2 is green." }],
    ]),
  ],
  [
    SA2Object.PICPUM1,
    new Map([
      [
        -1,
        {
          zRot: "If tens digit is set to A, spawns an animal. Ones digit is the tens digit of animal to randomly spawn from, i.e. 1 will spawn the animals of value 10 and 11. Debug mode: X is equal to the value of the tens digit, Y is animal type (A for 0, B for 1, C for 2).",
        },
      ],
    ]),
  ],
  [
    SA2Object.PILLAR,
    new Map([
      [
        21,
        {
          zRot: "An ID that tells the game which dynamite packs need to be blown up before the pillar will fall.",
        },
      ],
      [23, { var1: "Scales whole object." }],
    ]),
  ],
  [SA2Object.PILLAR2, new Map([[-1, { var1: "Scales whole object." }]])],
  [SA2Object.PILLAR3, new Map([[-1, { var1: "Scales whole object." }]])],
  [SA2Object.PILLAR4, new Map([[-1, { var1: "Scales whole object." }]])],
  [SA2Object.PLANT, new Map([[18, { var1: "Scales whole object." }]])],
  [
    SA2Object.PLANT2,
    new Map([[18, { var1: "Scales whole object.", var2: "Swaying speed." }]]),
  ],
  [
    SA2Object.PLANT3,
    new Map([[18, { var1: "Scales whole object.", var2: "Swaying speed." }]]),
  ],
  [SA2Object.PLANT4, new Map([[18, { var1: "Scales whole object." }]])],
  [
    SA2Object.PNP,
    new Map([
      [
        6,
        {
          var1: "Additional maximum height above the base 50 units. This positions the red circle.",
        },
      ],
    ]),
  ],
  [
    SA2Object.POISON,
    new Map([
      [
        22,
        {
          zRot: "An ID that tells the game which ROCKETMISSSILE will destroy the acid.",
        },
      ],
    ]),
  ],
  [
    SA2Object.POLE,
    new Map([
      [
        14,
        {
          var1: "Type of sign: 0 is over-the-road Amigo Left Lane sign, 1 is over-the-road Amigo Left Lane + Freedom sign, 2 is two signs with SYSTEM CHECK ACTIVE. Anything above 2 is reduced to it when the stage loads, but CheatEngine can force it to be 3 to get a big screen-looking thing that crashes the game immediately on unpausing.",
        },
      ],
      [16, { var1: "Scales both X and Z." }],
    ]),
  ],
  [
    SA2Object.POLEOBJ,
    new Map([
      [
        17,
        {
          var1: "Type of sign: 0 is over-the-road Amigo Left Lane sign, 1 is over-the-road Amigo Left Lane + Freedom sign, 2 is Tails Wanted. Anything above 2 is reduced to it when the stage loads, but CheatEngine can force it to be 3 to get a big screen-looking thing that crashes the game immediately on unpausing.",
        },
      ],
    ]),
  ],
  [SA2Object.POOL, new Map([[18, { var1: "Scales whole object." }]])],
  [
    SA2Object.POSTER,
    new Map([
      [
        -1,
        {
          var1: "Horizontal units to cover.",
          var2: "Vertical units to cover.",
          var3: "Ones digit is contents of poster: 0 is Sonic Team, 1 is PizzaSonic (DC)/burger (:B), 2 is Emerald Notwork (DC)/DigitalChoke (:B), 3 is ChaosCola, 4 is SOAP (DC)/Sonic Team (:B), 5 is Chao in Space 2, 6 is SA2 is Habit Forming, 7 is Spring Festival (DC)/10 Ring Box (:B), 8 is a palm shadow, 9 is NiGHTS.",
        },
      ],
      [
        14,
        {
          var3: "Ones digit is contents of poster: 0 is danger sign, 1 is SOAP.",
        },
      ],
    ]),
  ],
  [
    SA2Object.POSTER3,
    new Map([
      [
        -1,
        {
          var1: "Horizontal units to cover.",
          var2: "Vertical units to cover.",
        },
      ],
    ]),
  ],
  [
    SA2Object.POSTERM,
    new Map([
      [
        -1,
        {
          var1: "Horizontal units to cover.",
          var2: "Vertical units to cover.",
          zRot: "Brightness of the poster.",
          var3: "Ones digit is contents of poster: 0 is Sonic Team, 1 is PizzaSonic (DC)/burger (:B), 2 is Emerald Notwork (DC)/DigitalChoke (:B), 3 is ChaosCola, 4 is SOAP (DC)/Sonic Team (:B), 5 is Chao in Space 2, 6 is SA2 is Habit Forming, 7 is Spring Festival (DC)/10 Ring Box (:B), 8 is a palm shadow, 9 is NiGHTS.",
        },
      ],
    ]),
  ],
  [SA2Object.PPSHED, new Map([[5, { zRot: "" }]])],
  [
    SA2Object.PROPELLER,
    new Map([
      [
        26,
        {
          var1: "Value % 3 is color: 0 is red, 1 is green, 2 is blue.",
          var2: "If set to 0, will have collision. Otherwise, it won't.",
          var3: "Scales whole object.",
        },
      ],
    ]),
  ],
  [
    SA2Object.PROPELLER2,
    new Map([
      [
        26,
        {
          var1: "Value % 3 is color: 0 is red, 1 is green, 2 is blue.",
          var2: "If set to 0, will have collision. Otherwise, it won't.",
          var3: "Scales whole object.",
        },
      ],
    ]),
  ],
  [
    SA2Object.PSKULL,
    new Map([
      [
        -1,
        {
          zRot: "If tens digit is set to A, spawns an animal. Ones digit is the tens digit of animal to randomly spawn from, i.e. 1 will spawn the animals of value 10 and 11.",
        },
      ],
    ]),
  ],
  [
    SA2Object.KSKULL,
    new Map([
      [
        -1,
        {
          zRot: "If tens digit is set to A, spawns an animal. Ones digit is the tens digit of animal to randomly spawn from, i.e. 1 will spawn the animals of value 10 and 11.",
        },
      ],
    ]),
  ],
  [
    SA2Object.PYRAMID,
    new Map([
      [
        28,
        {
          zRot: "If tens digit is set to A, spawns an animal. Ones digit is the tens digit of animal to randomly spawn from, i.e. 1 will spawn the animals of value 10 and 11.",
        },
      ],
    ]),
  ],
  [SA2Object.RADER, new Map([[10, { yRot: "Rotation speed." }]])],
  [SA2Object.RADERS, new Map([[12, { xRot: "" }]])],
  [SA2Object.RAILOBJBL, new Map([[6, { var1: "Rotation speed of the X's." }]])],
  [SA2Object.RAILOBJBR, new Map([[6, { var1: "Rotation speed of the X's." }]])],
  [
    SA2Object.RING_CIRCLE,
    new Map([
      [
        -1,
        {
          var1: "A multiplier on the size of the circle that is about 1.2x larger than the radius. 10 units are added to the radius when the rings are loaded into the game.",
          var2: "Removes Rings, depending on (and % by) the number of Rings in the circle. (# - 1) will remove all Rings except the initial one. Only 4, 6, and 8 Rings have numbers with any other effect: setting to 1 (or 3 with 6) will remove every second Ring; setting to 2 with 6 or 3 with 8 will remove all but the initial Ring and its opposite.",
          var3: "Number of rings. Caps at 8.",
        },
      ],
    ]),
  ],
  [
    SA2Object.SWDRNGC,
    new Map([
      [
        -1,
        {
          zRot: "An ID that tells the game which switch creates the rings.",
          var1: "A multiplier on the size of the circle that is about 1.2x larger than the radius. 10 units are added to the radius when the rings are loaded into the game.",
          var2: "Removes Rings, depending on (and % by) the number of Rings in the circle. (# - 1) will remove all Rings except the initial one. Only 4, 6, and 8 Rings have numbers with any other effect: setting to 1 (or 3 with 6) will remove every second Ring; setting to 2 with 6 or 3 with 8 will remove all but the initial Ring and its opposite.",
          var3: "Number of rings. Caps at 8.",
        },
      ],
    ]),
  ],
  [
    SA2Object.RING_LINEAR,
    new Map([
      [
        -1,
        {
          var1: "Adds to the distance between rings, which starts at 10 game units.",
          var2: "Offset, in game units, of the last ring along the object's up axis. This is the Y axis by default, but matches rotation made to the object. The rings between the first and last are set to a curve that looks similar to a square root function, with more change near the beginning.",
          var3: "Number of rings. Caps at 8.",
        },
      ],
    ]),
  ],
  [
    SA2Object.SWDRNGL,
    new Map([
      [
        -1,
        {
          zRot: "An ID that tells the game which switch creates the rings.",
          var1: "Adds to the distance between rings, which starts at 10 game units.",
          var2: "Offset, in game units, of the last ring along the object's up axis. This is the Y axis by default, but matches rotation made to the object. The rings between the first and last are set to a curve that looks similar to a square root function, with more change near the beginning.",
          var3: "Number of rings. Caps at 8.",
        },
      ],
    ]),
  ],
  [
    SA2Object.ROADOBJ,
    new Map([
      [
        13,
        {
          xRot: "Value % 11 is type of prop: 0 is recycling bin, 1 is lavendar flower bunch, 2 is Got Ring? bench, 3 is Chaos Cola bench, 4 is lamppost, 5 is newspaper bins, 6 is pamphlet bins, 7 is curved forward palm leaves with shadow, 8 is flat palm leaves with shadow, 9 is curved back palm leaves with shadow, 10 is GUN posters. Debug, but could be a DC version thing: 10-15 are different. A Let's Go poster with a weird pink creature, the GUN posters, in light, medium, and dark variants.",
        },
      ],
    ]),
  ],
  [
    SA2Object.ROBJ,
    new Map([
      [
        17,
        {
          var1: "Type of object: 0 is descending left turn signs (270° rotation), 1 is ascending left turn signs (90° rotation), 2 is descending right turn signs, 3 is ascending right turn signs (180° rotation), 4 is palm tree, 5 is road construction sign, 6 is shootable twin yellow stoplight, 7 is lightup left arrows, 8 is lightup up arrows, 9 is recycle bin, 10 is lamppost, 11 is red bench, 12 is tour guide bin, 13 is newspaper bin, 14 is roadblock, 15 is pedestrian crossing sign, 16 is stop sign, 17 is floor stop text, 18 is do not enter sign with road spikes, 19 is bush polygon, 20 is 2-hour parking sign. Anything above 20 is reduced to it when the stage is loaded in, but CheatEngine can force it to be above that to get POLEOBJ models.",
        },
      ],
    ]),
  ],
  [
    SA2Object.ROBJ,
    new Map([
      [
        14,
        {
          xRot: "Value % 10 (decimal) is type of object: 0 is road construction sign, 1 is descending left turn signs (270° rotation), 2 is ascending left turn signs (90° rotation), 3 is descending right turn signs, 4 is ascending right turn signs (180° rotation), 5 is Road Closed Ahead vehicle, 6 is twin yellow stoplight, 7 is double flashing yellow lights, 8 is invisible?, 9 is guard rail flourescent light",
        },
      ],
    ]),
  ],
  [
    SA2Object.ROCK,
    new Map([
      [
        16,
        {
          xRot: "Likely rotation speed",
          var1: "Scale isn't a straight multiplier.",
          yRot: "Tens/ones places correspond to the ID of an associated enemy piece. FF indicates that there isn't one.",
          var2: "Oscillation amount.",
          var3: "Time, in frames, to oscillate from one end to the other.",
        },
      ],
    ]),
  ],
  [
    SA2Object.ROCKET,
    new Map([
      [
        -1,
        {
          xRot: "Set to 1 to make the rocket require a switch to turn on.",
          zRot: "An ID that tells the game which switch needs to be turned on to produce rockets.",
          var1: "X Coordinate of end location.",
          var2: "Y Coordinate of end location.",
          var3: "Z Coordinate of end location.",
        },
      ],
    ]),
  ],
  [
    SA2Object.STROCKET,
    new Map([
      [
        -1,
        {
          xRot: "Set to 1 to make the rocket require a switch to turn on.",
          zRot: "An ID that tells the game which switch needs to be turned on to produce rockets.",
          var1: "X Coordinate of end location.",
          var2: "Y Coordinate of end location.",
          var3: "Z Coordinate of end location.",
        },
      ],
    ]),
  ],
  [
    SA2Object.ROCKETMISSSILE,
    new Map([
      [
        -1,
        {
          xRot: "If tens digit % 2 = 1, the platform turns upside down. Ones digit is missile type: 0 is normal, 1 creates only one missile, 2 requires a switch to turn on, 3 requires enemies to be defeated to turn on.",
          zRot: "An ID that tells the game both which switch needs to be turned on to produce missiles, and which objects to destroy. Destruction is triggered when the rocket reaches its destination, even if that location doesn't touch the object. A rocket will not spawn if there are no matching objects.",
          var1: "X Coordinate of end location.",
          var2: "Y Coordinate of end location.",
          var3: "Z Coordinate of end location.",
        },
      ],
    ]),
  ],
  [
    SA2Object.MISSILE,
    new Map([
      [
        -1,
        {
          zRot: "An ID that tells the game both which switch needs to be turned on to produce missiles, and which objects to destroy. Destruction is triggered when the rocket reaches its destination, even if that location doesn't touch the object. A rocket will not spawn if there are no matching objects.",
          var1: "X Coordinate of end location.",
          var2: "Y Coordinate of end location.",
          var3: "Z Coordinate of end location.",
        },
      ],
      [
        11,
        {
          xRot: "If tens digit % 2 = 1, the platform turns upside down. If the ones digit is 2, the missile will require a switch to turn on.",
        },
      ],
    ]),
  ],
  [
    SA2Object.RMISSILE,
    new Map([
      [
        -1,
        {
          zRot: "An ID that tells the game both which switch needs to be turned on to produce missiles, and which objects to destroy. Destruction is triggered when the rocket reaches its destination, even if that location doesn't touch the object. A rocket will not spawn if there are no matching objects.",
          var1: "X Coordinate of end location.",
          var2: "Y Coordinate of end location.",
          var3: "Z Coordinate of end location.",
        },
      ],
      [
        11,
        {
          xRot: "If tens digit % 2 = 1, the platform turns upside down. If the ones digit is 2, the missile will require a switch to turn on.",
        },
      ],
    ]),
  ],
  [
    SA2Object.ROLL,
    new Map([
      [
        9,
        {
          var1: "Rotation speed. The decimal is used too; even a speed of 1.0 is decently fast.",
        },
      ],
    ]),
  ],
  [
    SA2Object.RESTART_OBJ,
    new Map([
      [
        -1,
        {
          var1: 'Debug: Translation is literally "don\'t worry". Probably refers to the object rotation spazzing out all the time in the debug editor.',
        },
      ],
    ]),
  ],
  [
    SA2Object.ROLTUTAT,
    new Map([
      [
        -1,
        {
          xRot: "Starting angle of the vine. Also shifts the wood the vine is suspended from.",
          var1: "Rotates wood relative to vine's starting location.",
          yRot: "",
          var2: "Appears to be swinging radius. The vine moves to accomodate.",
          zRot: "Higher values = less revolving on vine. 7000 is one revolution from start to finish.",
        },
      ],
    ]),
  ],
  [
    SA2Object.ROLTUTA,
    new Map([
      [
        3,
        {
          xRot: "",
          var1: "Appears to be swinging radius. The vine moves out to accomodate.",
          yRot: "",
          var2: "Multiplies vine length; 1 is pretty tall, 0 is short.",
          zRot: "Presumably the same as ROTULTAT",
        },
      ],
    ]),
  ],
  [
    SA2Object.SANDGLASS,
    new Map([
      [
        -1,
        {
          var1: "Time, in frames, doors are kept open for.",
          zRot: "An ID that tells the game which doors to open.",
        },
      ],
    ]),
  ],
  [
    SA2Object.SASA,
    new Map([
      [
        18,
        {
          var1: "Scales whole object.",
          var3: "If value is odd, the plant is shaded.",
        },
      ],
    ]),
  ],
  [
    SA2Object.SB_S,
    new Map([
      [
        17,
        {
          xRot: "Value % 3 is contents of poster: 0 is Samba de Taco (Dreamcast)/burger (Battle), 1 is SOAP(Dreamcast)/Sonic Team (Battle), 2 is Chaos Cola",
        },
      ],
    ]),
  ],
  [
    SA2Object.SCOL,
    new Map([
      [
        -1,
        {
          xRot: "An ID that tells the game which SLANEs to activate.",
          var1: "Radius., plus ~10 units.",
        },
      ],
    ]),
  ],
  [
    SA2Object.SCORPION,
    new Map([
      [
        25,
        {
          var1: "Scales X and Y directions.",
          var2: "If value is odd, tile rotates to be vertical. Due to gimble lock, this option is necessary to rotate the tile when it's vertical.",
          var3: "Value % 3 is color: 0 is red, 1 is green, 2 is blue. If (value / 3) % 2 = 1, the tile is shaded.",
        },
      ],
    ]),
  ],
  [
    SA2Object.SE,
    new Map([
      [
        9,
        {
          xRot: "Value % 2 is effect made: 0 is a fast cranking sound, 1 is a gas jet.",
        },
      ],
    ]),
  ],
  [
    SA2Object.SEARCHLIGHT,
    new Map([
      [
        9,
        {
          xRot: "How quickly the searchlight oscillates between upright and its 45 degree resting point.",
        },
      ],
    ]),
  ],
  [
    SA2Object.SHADOW,
    new Map([
      [
        25,
        {
          var2: "Z Scale.",
          var3: "Value % 2 is type of shadow: 0 is a square, 1 is a circle.",
        },
      ],
    ]),
  ],
  [
    SA2Object.SHAFT,
    new Map([
      [
        -1,
        {
          var1: "Scales whole object.",
          var2: "Speed of piston motion. Centered at -1.",
        },
      ],
    ]),
  ],
  [SA2Object.SHELF, new Map([[18, { var1: "Scales whole object." }]])],
  [
    SA2Object.SHELTH,
    new Map([
      [
        11,
        {
          xRot: "Hundreds digit: Direction door closes in. If even, closes from the top. If odd, closes from the bottom. Tens/ones digit: On SHELTH, level of door, equal to value + 1 (doesn't go above 5).",
          var1: "Initial closing speed. Switches to Y Scale halfway through.",
          var2: "End closing speed. Switches from X Scale halfway through.",
          zRot: "Number of frames to halt door at the halfway mark.",
        },
      ],
    ]),
  ],
  [
    SA2Object.LSHELTH,
    new Map([
      [
        11,
        {
          xRot: "Hundreds digit: Direction door closes in. If even, closes from the top. If odd, closes from the bottom. Tens/ones digit: On SHELTH, level of door, equal to value + 1 (doesn't go above 5).",
          var1: "Initial closing speed. Switches to Y Scale halfway through.",
          var2: "End closing speed. Switches from X Scale halfway through.",
          zRot: "Number of frames to halt door at the halfway mark.",
        },
      ],
    ]),
  ],
  [
    SA2Object.SHELTV,
    new Map([
      [
        11,
        {
          xRot: "Hundreds digit: Direction door closes in. If even, closes from the object's right. If odd, closes from the object's left. Tens/ones digit: On SHELTV, level of door, equal to value + 1 (doesn't go above 5).",
          var1: "Initial closing speed. Switches to Y Scale halfway through.",
          var2: "End closing speed. Switches from X Scale halfway through.",
          zRot: "Number of frames to halt door at the halfway mark.",
        },
      ],
    ]),
  ],
  [
    SA2Object.LSHELTV,
    new Map([
      [
        11,
        {
          xRot: "Hundreds digit: Direction door closes in. If even, closes from the object's right. If odd, closes from the object's left. Tens/ones digit: On SHELTV, level of door, equal to value + 1 (doesn't go above 5).",
          var1: "Initial closing speed. Switches to Y Scale halfway through.",
          var2: "End closing speed. Switches from X Scale halfway through.",
          zRot: "Number of frames to halt door at the halfway mark.",
        },
      ],
    ]),
  ],
  [
    SA2Object.SHIP,
    new Map([
      [
        28,
        {
          var1: "Scales whole object.",
          var2: "Swinging speed.",
          var3: "Type of ship: 0 has snake faces on the boat ends, 1 has Eggman faces.",
        },
      ],
    ]),
  ],
  [
    SA2Object.SHOUKOU,
    new Map([
      [
        -1,
        {
          xRot: "",
          var1: "Time in frames to wait at the peaks of movement.",
          var2: "Scales height, centered around -1.0.",
          zRot: "Oscillation speed.",
          var3: "Distance in game units to move up to.",
        },
      ],
    ]),
  ],
  [
    SA2Object.SHOUKOUK,
    new Map([
      [
        -1,
        {
          xRot: "",
          var1: "Time in frames to wait at the peaks of movement.",
          var2: "Scales height, centered around -1.0.",
          zRot: "Oscillation speed.",
          var3: "Distance in game units to move up to.",
        },
      ],
    ]),
  ],
  [
    SA2Object.BOXSHOUKOU,
    new Map([
      [
        -1,
        {
          xRot: "",
          var1: "Time in frames to wait at the peaks of movement.",
          var2: "Scales height, centered around -1.0.",
          zRot: "Oscillation speed.",
          var3: "Distance in game units to move up to.",
        },
      ],
    ]),
  ],
  [
    SA2Object.SHUT,
    new Map([
      [
        12,
        {
          xRot: "An ID that tells the game which dynamite packs need to be blown up before the shutter is destroyed.",
        },
      ],
    ]),
  ],
  [
    SA2Object.SHUTS,
    new Map([
      [
        12,
        {
          xRot: "An ID that tells the game which dynamite packs need to be blown up before the shutter is destroyed.",
        },
      ],
    ]),
  ],
  [
    SA2Object.SHUTTER,
    new Map([
      [
        -1,
        {
          xRot: "An ID that tells the game what objective needs to be completed to open the door.",
          zRot: "Type of door: 0 is locked by switch, 1 is locked by enemies, 2 is locked by dynamite, 3 is unlocked.",
        },
      ],
    ]),
  ],
  [
    SA2Object.SIDEWIND,
    new Map([
      [
        18,
        {
          var1: "Radius of the trigger cylinder.",
          var2: "Length of the trigger cylinder.",
        },
      ],
    ]),
  ],
  [
    SA2Object.SIGNBOARD,
    new Map([
      [
        13,
        {
          xRot: "Value % 5 is contents of poster: 0 is burger, 1 is DigitalChoke, 2 is Sonic Team, 3 is Chaos Cola, 4 is Sonic Team.",
        },
      ],
    ]),
  ],
  [
    SA2Object.SIGNEND,
    new Map([
      [
        -1,
        {
          var1: "Type of sign. Varies on the stage. Final Rush/Chase: 0 is yellow –, 1+ is red X. Cosmic Wall, based on value % 4: 0 is up arrow, 1 is left arrow, 2 is down arrow, 3 is right arrow.",
        },
      ],
    ]),
  ],
  [
    SA2Object.SIGNENDE,
    new Map([[-1, { var1: "Color: 0 is red, 1+ is green." }]]),
  ],
  [
    SA2Object.SIGNS,
    new Map([
      [
        13,
        {
          xRot: "Type of signage: 0 is flat stop text on ground, 1 is stop text at bottom of downhill, 2 is stop text at top of uphill, 3 is no parking, 4 is 2-hour parking, 5 is stop sign, 6 is do not enter, 7 is pedestrian sign, 8 is recycle bin, 9 is lamppost, 10 is pedestrian crossing sign, 11 crashes the game. Debug says 7 is max. 8+ spawn with CheatEngine, do they work with setfiles?",
        },
      ],
    ]),
  ],
  [
    SA2Object.SKULL,
    new Map([[-1, { var1: "Does it function differently than NOCOLSKULL?" }]]),
  ],
  [
    SA2Object.SL,
    new Map([
      [
        44,
        {
          var1: "Color, based on number % 3: 0 is red, 1 is blue, 2 is yellow.",
        },
      ],
    ]),
  ],
  [
    SA2Object.SLANE,
    new Map([
      [
        -1,
        {
          xRot: "Hundreds digit reverses the direction of rotation on non-falling types. Tens/ones digits are an ID that tells the game which SCOL triggers the road.",
          var2: "On falling type and SLANE2, how far the road falls down. If negative, the road will fade and be destroyed after it arrives.",
          zRot: "Determines what the road does: 0 makes it fall, 2 makes the back collapse, 3 makes it teeter side-to-side, 4 makes it teeter front-back.",
        },
      ],
    ]),
  ],
  [
    SA2Object.SLANE2,
    new Map([
      [
        -1,
        {
          xRot: "Thousands digit determines what the road does: 0 makes it fall, 2 makes the back collapse, 3 makes it teeter side-to-side, 4 makes it teeter front-back. Hundreds digit reverses the direction of rotation on non-falling types. Tens/ones digits are an ID that tells the game which SCOL triggers the road.",
          var2: "On falling type and SLANE2, how far the road falls down. If negative, the road will fade and be destroyed after it arrives.",
          zRot: "Determines what the road does: 0 makes it fall, 2 makes the back collapse, 3 makes it teeter side-to-side, 4 makes it teeter front-back.",
        },
      ],
    ]),
  ],
  [SA2Object.SNAKEDISH2, new Map([[28, { var1: "Scales whole object." }]])],
  [
    SA2Object.SNAKEPOT,
    new Map([[26, { var1: "Scales XZ plane. Centered at -1." }]]),
  ],
  [
    SA2Object.SNAKESTATUE,
    new Map([
      [
        28,
        {
          var1: "Value % 2 is snake angle: 0 faces the statue's right, 1 faces the left.",
        },
      ],
    ]),
  ],
  [
    SA2Object.SOAP_SW,
    new Map([
      [
        -1,
        {
          xRot: "",
          var1: "X Scale for Cube, Radius for Sphere",
          yRot: "",
          var2: "",
          zRot: "Ones digit % 2 is shape: 0 is cube, 1 is sphere.",
        },
      ],
    ]),
  ],
  [
    SA2Object.SPARK,
    new Map([[27, { var1: "Animation speed.", var2: "Scales whole object." }]]),
  ],
  [SA2Object.SPIDERWEB, new Map([[28, { var1: "Scales whole object." }]])],
  [
    SA2Object.SPINNER,
    new Map([
      [
        25,
        {
          var1: "Scales whole object.",
          var2: "Speed of piston motion. Centered at -1.",
        },
      ],
    ]),
  ],
  [
    SA2Object.SPRA,
    new Map([
      [
        -1,
        {
          var1: "Time, in frames, to lock the player's controls.",
          yRot: "Rotates along the axis of the spring. The player's rotation is set to this when the spring is used.",
          var2: "Multiplier of spring's power.",
        },
      ],
    ]),
  ],
  [
    SA2Object.SPRB,
    new Map([
      [
        -1,
        {
          var1: "Time, in frames, to lock the player's controls.",
          yRot: "Rotates along the axis of the spring. The player's rotation is set to this when the spring is used.",
          var2: "Multiplier of spring's power.",
        },
      ],
    ]),
  ],
  [
    SA2Object.KDSPRINGB,
    new Map([
      [
        -1,
        {
          var1: "Time, in frames, to lock the player's controls.",
          yRot: "Rotates along the axis of the spring. The player's rotation is set to this when the spring is used.",
          var2: "Multiplier of spring's power.",
        },
      ],
    ]),
  ],
  [
    SA2Object.SG_SPRB,
    new Map([
      [
        -1,
        {
          var1: "Time, in frames, to lock the player's controls.",
          yRot: "Rotates along the axis of the spring. The player's rotation is set to this when the spring is used.",
          var2: "Multiplier of spring's power.",
        },
      ],
    ]),
  ],
  [
    SA2Object.SGSPRINGB,
    new Map([
      [
        -1,
        {
          var1: "Time, in frames, to lock the player's controls.",
          yRot: "Rotates along the axis of the spring. The player's rotation is set to this when the spring is used.",
          var2: "Multiplier of spring's power.",
        },
      ],
    ]),
  ],
  [
    SA2Object.STAFF,
    new Map([
      [23, { zRot: "", var3: "If value is odd, pole will be shaded." }],
    ]),
  ],
  [
    SA2Object.STAGE,
    new Map([
      [
        32,
        {
          var1: "If value is odd, platform uses the heat shading from the Sunglasses area.",
        },
      ],
      [
        43,
        {
          xRot: "If value is odd, guard rails will be put on the front/back sides.",
        },
      ],
    ]),
  ],
  [
    SA2Object.STAKE,
    new Map([
      [
        18,
        {
          var1: "Scales whole object.",
          var3: "If value is odd, the stake is shaded.",
        },
      ],
    ]),
  ],
  [
    SA2Object.STEP,
    new Map([
      [
        -1,
        {
          xRot: "On type 4, hundreds digit scales the radius of the cylinder that triggers the return trip. Ones digit is direction to travel: 0 is nowhere, 1 is vertical, 2 is horizontal, 3 is radially; 4 goes upward when stepped on, returning to its position if the base is approached; 5 goes downward when stepped on, returning to its position if the base is approached.",
          var1: "On linear types, distance in game units to travel from spawn and back. On radial type, radius of arc to travel around. On type 2, a second platform is spawned at this location, and both travel like normal.",
          var2: "Multiplier of movement speed in travelling. On radial types, positive is counterclockwise",
          zRot: "On type 2, rotation of second platform around the first. On radial type, the rotation of the travel arc around the platform (regular Y Rotation is the platform itself).",
          var3: "Frames to wait at each end.",
        },
      ],
    ]),
  ],
  [
    SA2Object.STEPB,
    new Map([
      [
        -1,
        {
          xRot: "On type 4, hundreds digit scales the radius of the cylinder that triggers the return trip. Ones digit is direction to travel: 0 is nowhere, 1 is vertical, 2 is horizontal, 3 is radially; 4 goes upward when stepped on, returning to its position if the base is approached; 5 goes downward when stepped on, returning to its position if the base is approached.",
          var1: "On linear types, distance in game units to travel from spawn and back. On radial type, radius of arc to travel around. On type 2, a second platform is spawned at this location, and both travel like normal.",
          var2: "Multiplier of movement speed in travelling. On radial types, positive is counterclockwise",
          zRot: "On type 2, rotation of second platform around the first. On radial type, the rotation of the travel arc around the platform (regular Y Rotation is the platform itself).",
          var3: "Frames to wait at each end.",
        },
      ],
    ]),
  ],
  [
    SA2Object.LASTSTEP,
    new Map([
      [
        -1,
        {
          xRot: "On type 4, hundreds digit scales the radius of the cylinder that triggers the return trip. Ones digit is direction to travel: 0 is nowhere, 1 is vertical, 2 is horizontal, 3 is radially; 4 goes upward when stepped on, returning to its position if the base is approached; 5 goes downward when stepped on, returning to its position if the base is approached.",
          var1: "On linear types, distance in game units to travel from spawn and back. On radial type, radius of arc to travel around. On type 2, a second platform is spawned at this location, and both travel like normal.",
          var2: "Multiplier of movement speed in travelling. On radial types, positive is counterclockwise",
          zRot: "On type 2, rotation of second platform around the first. On radial type, the rotation of the travel arc around the platform (regular Y Rotation is the platform itself).",
          var3: "Frames to wait at each end.",
        },
      ],
    ]),
  ],
  [
    SA2Object.STONEHEAD,
    new Map([
      [
        16,
        {
          var1: "Scales the object object.",
          var2: "Scales rail length.",
          zRot: "How far on the rail the head is located. Default is on the object's left.",
        },
      ],
    ]),
  ],
  [
    SA2Object.STOPLOCKON,
    new Map([
      [
        -1,
        {
          xRot: 'If set to 0, uses the "old type", which only blocks lock-ons within ~5 units of its position (they are set in 10-unit grids in-game). Debug shows a tiny rotating cube; presumably, the object itself gets locked onto in order to cancel it.',
        },
      ],
    ]),
  ],
  [
    SA2Object.STOPLSD,
    new Map([
      [
        -1,
        {
          xRot: "",
          var1: "X Scale of cube, radius of sphere.",
          zRot: "Ones digit % 2 is shape: 0 is cube, 1 is sphere.",
        },
      ],
    ]),
  ],
  [
    SA2Object.STORE,
    new Map([
      [
        -1,
        {
          var1: "Scales whole object.",
          var3: "Color, based on value % 3: 0 is blue, 1 is green, 2 is red.",
        },
      ],
    ]),
  ],
  [
    SA2Object.STREAM,
    new Map([
      [-1, { var1: "Radius of cylinder.", var2: "Length of cylinder." }],
    ]),
  ],
  [
    SA2Object.SWITCH,
    new Map([
      [
        -1,
        {
          var1: "Type of switch: 0 is toggle, 1 is mutually exclusive (to other type-1 switches), 2 is timed, 3 is permanent.",
          var2: "An ID that tells the game what switch-activated object to trigger when it is flicked.",
          var3: "On timed switches, is the time, in frames, that the switch remains active for.",
        },
      ],
    ]),
  ],
  [
    SA2Object.TAIMATSU,
    new Map([
      [21, { var1: "Radius of effect." }],
      [
        -1,
        {
          var1: "Radius of effect.",
          var3: "Value % 3 is color: 0 is blue, 1 is green, 2 is red.",
        },
      ],
    ]),
  ],
  [
    SA2Object.TAKI,
    new Map([
      [
        4,
        {
          var1: "Water speed. Strangely, positive values cause the water to travel upwards into the rock.",
        },
      ],
    ]),
  ],
  [
    SA2Object.TERMINAL,
    new Map([[5, { xRot: "", var1: "", yRot: "", var2: "", zRot: "" }]]),
  ],
  [
    SA2Object.TORCH,
    new Map([
      [
        -1,
        {
          var2: "Displaces the torch on the Y axis.",
          var3: "Color, based on value % 3: 0 is blue, 1 is green, 2 is red.",
        },
      ],
    ]),
  ],
  [
    SA2Object.TORCH2,
    new Map([
      [
        -1,
        {
          var1: "Scales whole object.",
          var3: "Color, based on value % 3: 0 is blue, 1 is green, 2 is red.",
        },
      ],
    ]),
  ],
  [SA2Object.TORCHCUP, new Map([[28, { var1: "Scales whole object." }]])],
  [
    SA2Object.TREASURE,
    new Map([
      [
        -1,
        { var3: "Color, based on value % 3: 0 is blue, 1 is green, 2 is red." },
      ],
    ]),
  ],
  [
    SA2Object.TRUCK,
    new Map([
      [13, { var1: "Truck's max speed.", var2: "Radius of trigger sphere." }],
    ]),
  ],
  [
    SA2Object.UDREEL,
    new Map([
      [
        -1,
        {
          xRot: "Even numbers stay on each end. Odd numbers move back to the bottom when finished.",
          var1: "Disjoints pulley's upper resting spot down by ~22.5 units * number.",
          var2: "Disjoints pulley's lower resting spot down by ~22.5 units * number. If this would be above the upper limit, the pulley will not reverse them.",
          zRot: "",
          var3: "Multiplier on player's jump strength when they let go of the pulley.",
        },
      ],
    ]),
  ],
  [
    SA2Object.UGOKIDAI,
    new Map([
      [
        23,
        {
          xRot: "Oscillation speed.",
          var1: "Scales both X and Z directions.",
          yRot: "Tens and ones digits offset platform's cycle.",
          var2: "Oscillation amount.",
          zRot: "Block height is multiplied by (number % 3 + 1). If number / 3 is odd, the texture will darken.",
        },
      ],
    ]),
  ],
  [
    SA2Object.UKIASIBA,
    new Map([
      [
        7,
        {
          var2: "Maximum Y distance to float/sink. Seems to be contextual to the water level rather than having a defined starting level.",
        },
      ],
    ]),
  ],
  [
    SA2Object.UPSTREAM,
    new Map([
      [
        -1,
        {
          var1: "Debug: Outside width is less opaque than inside. Likely has less strength.",
          var2: "Height of cylinder, in game units.",
          var3: "Debug: Outside width is less opaque than inside. Likely has more strength.",
        },
      ],
    ]),
  ],
  [
    SA2Object.VASE,
    new Map([
      [
        26,
        {
          zRot: "If tens digit is set to A, spawns an animal. Ones digit is the tens digit of animal to randomly spawn from, i.e. 1 will spawn the animals of value 10 and 11.",
        },
      ],
    ]),
  ],
  [
    SA2Object.WALL,
    new Map([
      [
        9,
        {
          xRot: "Debug: Leftover from CAGE objects?",
          var1: "Z movement speed. If positive, will stop once the door reaches the other side of the mechanism.",
        },
      ],
      [23, { var3: "If value is odd, the door is shaded." }],
      [
        28,
        {
          var1: "If value is odd, the barrier brightens.",
          var3: "If value is odd, the barrier widens somewhat.",
        },
      ],
    ]),
  ],
  [SA2Object.WALL_FIRE, new Map([[21, { var1: "Scales the whole model." }]])],
  [
    SA2Object.WARP,
    new Map([
      [
        -1,
        {
          xRot: "In Wild Canyon, if tens digit % 2 is 1, painting becomes shaded. Ones digit cycles between large, medium, and small sizes.",
          var1: "X Coordinate of warp location.",
          var2: "Y Coordinate of warp location.",
          zRot: "Player's rotation upon exiting the warp.",
          var3: "Z Coordinate of warp location.",
        },
      ],
    ]),
  ],
  [
    SA2Object.WARP2,
    new Map([
      [
        -1,
        {
          xRot: "In Wild Canyon, if tens digit % 2 is 1, painting becomes shaded. Ones digit cycles between large, medium, and small sizes.",
          var1: "X Coordinate of warp location.",
          var2: "Y Coordinate of warp location.",
          zRot: "Player's rotation upon exiting the warp.",
          var3: "Z Coordinate of warp location.",
        },
      ],
    ]),
  ],
  [
    SA2Object.WARPCOLI,
    new Map([
      [
        -1,
        {
          var1: "X Coordinate of warp location.",
          var2: "Y Coordinate of warp location.",
          zRot: "Player's rotation upon exiting the warp.",
          var3: "Z Coordinate of warp location.",
        },
      ],
    ]),
  ],
  [
    SA2Object.WEED,
    new Map([
      [
        -1,
        {
          var1: "Scales the whole model.",
          var3: "Value % 2 is weed type: 0 is small, 1 is large.",
        },
      ],
      [28, { var2: "Height of cylinder, in game units." }],
    ]),
  ],
  [SA2Object.WIND, new Map([[-1, { var1: "", var3: "" }]])],
  [SA2Object.WIND2, new Map([[-1, { var2: "", var3: "" }]])],
  [
    SA2Object.WIND,
    new Map([
      [
        16,
        {
          xRot: "Likely whether rocks should float up with the wind",
          var1: "Debug: Outside width is less opaque than inside. Likely has less strength.",
          var2: "",
          var3: "Debug: Outside width is less opaque than inside. Likely has more strength.",
        },
      ],
      [
        18,
        {
          xRot: "If odd, the wind will play a water flowing sound while it's pushing you.",
          var1: "Scales the bottom face of the cylinder. The wind will cause horizontal movement to scale from bottom to top.",
          var2: "Height of the cylinder.",
          var3: "Scales the top face of the cylinder. The wind will cause horizontal movement to scale from bottom to top.",
        },
      ],
    ]),
  ],
  [
    SA2Object.WINDMILL,
    new Map([
      [
        28,
        {
            zRot: "Wheel rotation speed.",
            var1: "Slides the wheel across the bar, with in-bounds locations being between -100 and 100.",
        },
      ],
    ]),
  ],
  [
    SA2Object.WSMMLS,
    new Map([
      [
        -1,
        {
          zRot: "Tens digit matches the animal tier to randomly spawn from. Values above 2 default to 0. Ones digit % 2 is shape: 0 is sphere, 1 is box",
        },
      ],
    ]),
  ],
  [
    SA2Object.YOKOTUTA,
    new Map([
      [
        4,
        {
          xRot: "",
          zRot: "Rotates the vine and stand along the axis of the ring at the base.",
          var1: "Multiplier on sideways launching power.",
          var2: "Multiplier on directional launching power, equal to (1 + number).",
          var3: "Speed of launch. Affects ending momentum. Quite sensitive; values pretty much must be between 0 and .1 to be smooth.",
        },
      ],
    ]),
  ],
  [
    SA2Object.TATETUTA,
    new Map([
      [
        4,
        {
          xRot: "",
          zRot: "Rotates the vine and stand along the axis of the ring at the base.",
          var1: "Multiplier on sideways launching power.",
          var2: "Multiplier on directional launching power, equal to (1 + number).",
          var3: "Speed of launch. Affects ending momentum. Quite sensitive; values pretty much must be between 0 and .1 to be smooth.",
        },
      ],
    ]),
  ],
]);



// Legal jargon.
/*************************************************************************
 * Copyright 2023 Google LLC
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy
 * of the License at
 * 
 *  https://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 *************************************************************************/
